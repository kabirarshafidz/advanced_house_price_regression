{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "cd942491",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-10-22T11:59:22.875329Z",
     "iopub.status.busy": "2024-10-22T11:59:22.874774Z",
     "iopub.status.idle": "2024-10-22T11:59:26.095332Z",
     "shell.execute_reply": "2024-10-22T11:59:26.093838Z"
    },
    "papermill": {
     "duration": 3.242392,
     "end_time": "2024-10-22T11:59:26.098609",
     "exception": false,
     "start_time": "2024-10-22T11:59:22.856217",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/house-prices-advanced-regression-techniques/sample_submission.csv\n",
      "/kaggle/input/house-prices-advanced-regression-techniques/data_description.txt\n",
      "/kaggle/input/house-prices-advanced-regression-techniques/train.csv\n",
      "/kaggle/input/house-prices-advanced-regression-techniques/test.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "from pandas.api.types import CategoricalDtype\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "from sklearn.model_selection import cross_val_score\n",
    "\n",
    "from sklearn.ensemble import GradientBoostingRegressor\n",
    "\n",
    "from sklearn.feature_selection import mutual_info_regression\n",
    "from sklearn.decomposition import PCA\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "\n",
    "from sklearn.metrics import r2_score\n",
    "\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")\n",
    "\n",
    "\n",
    "sns.set()\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "        \n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1f830e30",
   "metadata": {
    "papermill": {
     "duration": 0.016027,
     "end_time": "2024-10-22T11:59:26.132793",
     "exception": false,
     "start_time": "2024-10-22T11:59:26.116766",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Data Loading"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "2511ccba",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:59:26.167571Z",
     "iopub.status.busy": "2024-10-22T11:59:26.166438Z",
     "iopub.status.idle": "2024-10-22T11:59:26.222084Z",
     "shell.execute_reply": "2024-10-22T11:59:26.220654Z"
    },
    "papermill": {
     "duration": 0.076017,
     "end_time": "2024-10-22T11:59:26.224825",
     "exception": false,
     "start_time": "2024-10-22T11:59:26.148808",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "raw_data = pd.read_csv('/kaggle/input/house-prices-advanced-regression-techniques/train.csv', index_col='Id')\n",
    "raw_data.reset_index(drop=True, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "bb0a206f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:59:26.259325Z",
     "iopub.status.busy": "2024-10-22T11:59:26.258862Z",
     "iopub.status.idle": "2024-10-22T11:59:26.360284Z",
     "shell.execute_reply": "2024-10-22T11:59:26.358587Z"
    },
    "papermill": {
     "duration": 0.121832,
     "end_time": "2024-10-22T11:59:26.362932",
     "exception": false,
     "start_time": "2024-10-22T11:59:26.241100",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>MSSubClass</th>\n",
       "      <th>LotFrontage</th>\n",
       "      <th>LotArea</th>\n",
       "      <th>OverallQual</th>\n",
       "      <th>OverallCond</th>\n",
       "      <th>YearBuilt</th>\n",
       "      <th>YearRemodAdd</th>\n",
       "      <th>MasVnrArea</th>\n",
       "      <th>BsmtFinSF1</th>\n",
       "      <th>BsmtFinSF2</th>\n",
       "      <th>...</th>\n",
       "      <th>WoodDeckSF</th>\n",
       "      <th>OpenPorchSF</th>\n",
       "      <th>EnclosedPorch</th>\n",
       "      <th>3SsnPorch</th>\n",
       "      <th>ScreenPorch</th>\n",
       "      <th>PoolArea</th>\n",
       "      <th>MiscVal</th>\n",
       "      <th>MoSold</th>\n",
       "      <th>YrSold</th>\n",
       "      <th>SalePrice</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1201.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1452.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>56.897260</td>\n",
       "      <td>70.049958</td>\n",
       "      <td>10516.828082</td>\n",
       "      <td>6.099315</td>\n",
       "      <td>5.575342</td>\n",
       "      <td>1971.267808</td>\n",
       "      <td>1984.865753</td>\n",
       "      <td>103.685262</td>\n",
       "      <td>443.639726</td>\n",
       "      <td>46.549315</td>\n",
       "      <td>...</td>\n",
       "      <td>94.244521</td>\n",
       "      <td>46.660274</td>\n",
       "      <td>21.954110</td>\n",
       "      <td>3.409589</td>\n",
       "      <td>15.060959</td>\n",
       "      <td>2.758904</td>\n",
       "      <td>43.489041</td>\n",
       "      <td>6.321918</td>\n",
       "      <td>2007.815753</td>\n",
       "      <td>180921.195890</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>42.300571</td>\n",
       "      <td>24.284752</td>\n",
       "      <td>9981.264932</td>\n",
       "      <td>1.382997</td>\n",
       "      <td>1.112799</td>\n",
       "      <td>30.202904</td>\n",
       "      <td>20.645407</td>\n",
       "      <td>181.066207</td>\n",
       "      <td>456.098091</td>\n",
       "      <td>161.319273</td>\n",
       "      <td>...</td>\n",
       "      <td>125.338794</td>\n",
       "      <td>66.256028</td>\n",
       "      <td>61.119149</td>\n",
       "      <td>29.317331</td>\n",
       "      <td>55.757415</td>\n",
       "      <td>40.177307</td>\n",
       "      <td>496.123024</td>\n",
       "      <td>2.703626</td>\n",
       "      <td>1.328095</td>\n",
       "      <td>79442.502883</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>20.000000</td>\n",
       "      <td>21.000000</td>\n",
       "      <td>1300.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1872.000000</td>\n",
       "      <td>1950.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2006.000000</td>\n",
       "      <td>34900.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>20.000000</td>\n",
       "      <td>59.000000</td>\n",
       "      <td>7553.500000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>1954.000000</td>\n",
       "      <td>1967.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>2007.000000</td>\n",
       "      <td>129975.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>50.000000</td>\n",
       "      <td>69.000000</td>\n",
       "      <td>9478.500000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>1973.000000</td>\n",
       "      <td>1994.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>383.500000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>25.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>2008.000000</td>\n",
       "      <td>163000.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>70.000000</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>11601.500000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>2000.000000</td>\n",
       "      <td>2004.000000</td>\n",
       "      <td>166.000000</td>\n",
       "      <td>712.250000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>168.000000</td>\n",
       "      <td>68.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>2009.000000</td>\n",
       "      <td>214000.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>190.000000</td>\n",
       "      <td>313.000000</td>\n",
       "      <td>215245.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>2010.000000</td>\n",
       "      <td>2010.000000</td>\n",
       "      <td>1600.000000</td>\n",
       "      <td>5644.000000</td>\n",
       "      <td>1474.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>857.000000</td>\n",
       "      <td>547.000000</td>\n",
       "      <td>552.000000</td>\n",
       "      <td>508.000000</td>\n",
       "      <td>480.000000</td>\n",
       "      <td>738.000000</td>\n",
       "      <td>15500.000000</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>2010.000000</td>\n",
       "      <td>755000.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8 rows × 37 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        MSSubClass  LotFrontage        LotArea  OverallQual  OverallCond  \\\n",
       "count  1460.000000  1201.000000    1460.000000  1460.000000  1460.000000   \n",
       "mean     56.897260    70.049958   10516.828082     6.099315     5.575342   \n",
       "std      42.300571    24.284752    9981.264932     1.382997     1.112799   \n",
       "min      20.000000    21.000000    1300.000000     1.000000     1.000000   \n",
       "25%      20.000000    59.000000    7553.500000     5.000000     5.000000   \n",
       "50%      50.000000    69.000000    9478.500000     6.000000     5.000000   \n",
       "75%      70.000000    80.000000   11601.500000     7.000000     6.000000   \n",
       "max     190.000000   313.000000  215245.000000    10.000000     9.000000   \n",
       "\n",
       "         YearBuilt  YearRemodAdd   MasVnrArea   BsmtFinSF1   BsmtFinSF2  ...  \\\n",
       "count  1460.000000   1460.000000  1452.000000  1460.000000  1460.000000  ...   \n",
       "mean   1971.267808   1984.865753   103.685262   443.639726    46.549315  ...   \n",
       "std      30.202904     20.645407   181.066207   456.098091   161.319273  ...   \n",
       "min    1872.000000   1950.000000     0.000000     0.000000     0.000000  ...   \n",
       "25%    1954.000000   1967.000000     0.000000     0.000000     0.000000  ...   \n",
       "50%    1973.000000   1994.000000     0.000000   383.500000     0.000000  ...   \n",
       "75%    2000.000000   2004.000000   166.000000   712.250000     0.000000  ...   \n",
       "max    2010.000000   2010.000000  1600.000000  5644.000000  1474.000000  ...   \n",
       "\n",
       "        WoodDeckSF  OpenPorchSF  EnclosedPorch    3SsnPorch  ScreenPorch  \\\n",
       "count  1460.000000  1460.000000    1460.000000  1460.000000  1460.000000   \n",
       "mean     94.244521    46.660274      21.954110     3.409589    15.060959   \n",
       "std     125.338794    66.256028      61.119149    29.317331    55.757415   \n",
       "min       0.000000     0.000000       0.000000     0.000000     0.000000   \n",
       "25%       0.000000     0.000000       0.000000     0.000000     0.000000   \n",
       "50%       0.000000    25.000000       0.000000     0.000000     0.000000   \n",
       "75%     168.000000    68.000000       0.000000     0.000000     0.000000   \n",
       "max     857.000000   547.000000     552.000000   508.000000   480.000000   \n",
       "\n",
       "          PoolArea       MiscVal       MoSold       YrSold      SalePrice  \n",
       "count  1460.000000   1460.000000  1460.000000  1460.000000    1460.000000  \n",
       "mean      2.758904     43.489041     6.321918  2007.815753  180921.195890  \n",
       "std      40.177307    496.123024     2.703626     1.328095   79442.502883  \n",
       "min       0.000000      0.000000     1.000000  2006.000000   34900.000000  \n",
       "25%       0.000000      0.000000     5.000000  2007.000000  129975.000000  \n",
       "50%       0.000000      0.000000     6.000000  2008.000000  163000.000000  \n",
       "75%       0.000000      0.000000     8.000000  2009.000000  214000.000000  \n",
       "max     738.000000  15500.000000    12.000000  2010.000000  755000.000000  \n",
       "\n",
       "[8 rows x 37 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "raw_data.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "bfa88b09",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:59:26.398895Z",
     "iopub.status.busy": "2024-10-22T11:59:26.398443Z",
     "iopub.status.idle": "2024-10-22T11:59:26.428623Z",
     "shell.execute_reply": "2024-10-22T11:59:26.427270Z"
    },
    "papermill": {
     "duration": 0.05147,
     "end_time": "2024-10-22T11:59:26.431324",
     "exception": false,
     "start_time": "2024-10-22T11:59:26.379854",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1460 entries, 0 to 1459\n",
      "Data columns (total 80 columns):\n",
      " #   Column         Non-Null Count  Dtype  \n",
      "---  ------         --------------  -----  \n",
      " 0   MSSubClass     1460 non-null   int64  \n",
      " 1   MSZoning       1460 non-null   object \n",
      " 2   LotFrontage    1201 non-null   float64\n",
      " 3   LotArea        1460 non-null   int64  \n",
      " 4   Street         1460 non-null   object \n",
      " 5   Alley          91 non-null     object \n",
      " 6   LotShape       1460 non-null   object \n",
      " 7   LandContour    1460 non-null   object \n",
      " 8   Utilities      1460 non-null   object \n",
      " 9   LotConfig      1460 non-null   object \n",
      " 10  LandSlope      1460 non-null   object \n",
      " 11  Neighborhood   1460 non-null   object \n",
      " 12  Condition1     1460 non-null   object \n",
      " 13  Condition2     1460 non-null   object \n",
      " 14  BldgType       1460 non-null   object \n",
      " 15  HouseStyle     1460 non-null   object \n",
      " 16  OverallQual    1460 non-null   int64  \n",
      " 17  OverallCond    1460 non-null   int64  \n",
      " 18  YearBuilt      1460 non-null   int64  \n",
      " 19  YearRemodAdd   1460 non-null   int64  \n",
      " 20  RoofStyle      1460 non-null   object \n",
      " 21  RoofMatl       1460 non-null   object \n",
      " 22  Exterior1st    1460 non-null   object \n",
      " 23  Exterior2nd    1460 non-null   object \n",
      " 24  MasVnrType     588 non-null    object \n",
      " 25  MasVnrArea     1452 non-null   float64\n",
      " 26  ExterQual      1460 non-null   object \n",
      " 27  ExterCond      1460 non-null   object \n",
      " 28  Foundation     1460 non-null   object \n",
      " 29  BsmtQual       1423 non-null   object \n",
      " 30  BsmtCond       1423 non-null   object \n",
      " 31  BsmtExposure   1422 non-null   object \n",
      " 32  BsmtFinType1   1423 non-null   object \n",
      " 33  BsmtFinSF1     1460 non-null   int64  \n",
      " 34  BsmtFinType2   1422 non-null   object \n",
      " 35  BsmtFinSF2     1460 non-null   int64  \n",
      " 36  BsmtUnfSF      1460 non-null   int64  \n",
      " 37  TotalBsmtSF    1460 non-null   int64  \n",
      " 38  Heating        1460 non-null   object \n",
      " 39  HeatingQC      1460 non-null   object \n",
      " 40  CentralAir     1460 non-null   object \n",
      " 41  Electrical     1459 non-null   object \n",
      " 42  1stFlrSF       1460 non-null   int64  \n",
      " 43  2ndFlrSF       1460 non-null   int64  \n",
      " 44  LowQualFinSF   1460 non-null   int64  \n",
      " 45  GrLivArea      1460 non-null   int64  \n",
      " 46  BsmtFullBath   1460 non-null   int64  \n",
      " 47  BsmtHalfBath   1460 non-null   int64  \n",
      " 48  FullBath       1460 non-null   int64  \n",
      " 49  HalfBath       1460 non-null   int64  \n",
      " 50  BedroomAbvGr   1460 non-null   int64  \n",
      " 51  KitchenAbvGr   1460 non-null   int64  \n",
      " 52  KitchenQual    1460 non-null   object \n",
      " 53  TotRmsAbvGrd   1460 non-null   int64  \n",
      " 54  Functional     1460 non-null   object \n",
      " 55  Fireplaces     1460 non-null   int64  \n",
      " 56  FireplaceQu    770 non-null    object \n",
      " 57  GarageType     1379 non-null   object \n",
      " 58  GarageYrBlt    1379 non-null   float64\n",
      " 59  GarageFinish   1379 non-null   object \n",
      " 60  GarageCars     1460 non-null   int64  \n",
      " 61  GarageArea     1460 non-null   int64  \n",
      " 62  GarageQual     1379 non-null   object \n",
      " 63  GarageCond     1379 non-null   object \n",
      " 64  PavedDrive     1460 non-null   object \n",
      " 65  WoodDeckSF     1460 non-null   int64  \n",
      " 66  OpenPorchSF    1460 non-null   int64  \n",
      " 67  EnclosedPorch  1460 non-null   int64  \n",
      " 68  3SsnPorch      1460 non-null   int64  \n",
      " 69  ScreenPorch    1460 non-null   int64  \n",
      " 70  PoolArea       1460 non-null   int64  \n",
      " 71  PoolQC         7 non-null      object \n",
      " 72  Fence          281 non-null    object \n",
      " 73  MiscFeature    54 non-null     object \n",
      " 74  MiscVal        1460 non-null   int64  \n",
      " 75  MoSold         1460 non-null   int64  \n",
      " 76  YrSold         1460 non-null   int64  \n",
      " 77  SaleType       1460 non-null   object \n",
      " 78  SaleCondition  1460 non-null   object \n",
      " 79  SalePrice      1460 non-null   int64  \n",
      "dtypes: float64(3), int64(34), object(43)\n",
      "memory usage: 912.6+ KB\n"
     ]
    }
   ],
   "source": [
    "raw_data.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bd1ed787",
   "metadata": {
    "papermill": {
     "duration": 0.016714,
     "end_time": "2024-10-22T11:59:26.465005",
     "exception": false,
     "start_time": "2024-10-22T11:59:26.448291",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Utils"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "78c9664d",
   "metadata": {
    "papermill": {
     "duration": 0.016432,
     "end_time": "2024-10-22T11:59:26.498282",
     "exception": false,
     "start_time": "2024-10-22T11:59:26.481850",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Encoder"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "221495e4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:59:26.534929Z",
     "iopub.status.busy": "2024-10-22T11:59:26.533842Z",
     "iopub.status.idle": "2024-10-22T11:59:26.546737Z",
     "shell.execute_reply": "2024-10-22T11:59:26.545209Z"
    },
    "papermill": {
     "duration": 0.034263,
     "end_time": "2024-10-22T11:59:26.549414",
     "exception": false,
     "start_time": "2024-10-22T11:59:26.515151",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Nominal Features\n",
    "features_nom = [\"MSSubClass\", \"MSZoning\", \"Street\", \"Alley\", \"LandContour\", \"LotConfig\", \"Neighborhood\", \"Condition1\", \"Condition2\", \"BldgType\", \"HouseStyle\", \"RoofStyle\", \"RoofMatl\", \"Exterior1st\", \"Exterior2nd\", \"MasVnrType\", \"Foundation\", \"Heating\", \"CentralAir\", \"GarageType\", \"MiscFeature\", \"SaleType\", \"SaleCondition\"]\n",
    "\n",
    "\n",
    "# Ordinal Features\n",
    "# The ordinal (ordered) categorical features \n",
    "# Pandas calls the categories \"levels\"\n",
    "five_levels = [\"Po\", \"Fa\", \"TA\", \"Gd\", \"Ex\"]\n",
    "ten_levels = list(range(10))\n",
    "\n",
    "ordered_levels = {\n",
    "    \"OverallQual\": ten_levels,\n",
    "    \"OverallCond\": ten_levels,\n",
    "    \"ExterQual\": five_levels,\n",
    "    \"ExterCond\": five_levels,\n",
    "    \"BsmtQual\": five_levels,\n",
    "    \"BsmtCond\": five_levels,\n",
    "    \"HeatingQC\": five_levels,\n",
    "    \"KitchenQual\": five_levels,\n",
    "    \"FireplaceQu\": five_levels,\n",
    "    \"GarageQual\": five_levels,\n",
    "    \"GarageCond\": five_levels,\n",
    "    \"PoolQC\": five_levels,\n",
    "    \"LotShape\": [\"Reg\", \"IR1\", \"IR2\", \"IR3\"],\n",
    "    \"LandSlope\": [\"Sev\", \"Mod\", \"Gtl\"],\n",
    "    \"BsmtExposure\": [\"No\", \"Mn\", \"Av\", \"Gd\"],\n",
    "    \"BsmtFinType1\": [\"Unf\", \"LwQ\", \"Rec\", \"BLQ\", \"ALQ\", \"GLQ\"],\n",
    "    \"BsmtFinType2\": [\"Unf\", \"LwQ\", \"Rec\", \"BLQ\", \"ALQ\", \"GLQ\"],\n",
    "    \"Functional\": [\"Sal\", \"Sev\", \"Maj1\", \"Maj2\", \"Mod\", \"Min2\", \"Min1\", \"Typ\"],\n",
    "    \"GarageFinish\": [\"Unf\", \"RFn\", \"Fin\"],\n",
    "    \"PavedDrive\": [\"N\", \"P\", \"Y\"],\n",
    "    \"Utilities\": [\"NoSeWa\", \"NoSewr\", \"AllPub\"],\n",
    "    \"CentralAir\": [\"N\", \"Y\"],\n",
    "    \"Electrical\": [\"Mix\", \"FuseP\", \"FuseF\", \"FuseA\", \"SBrkr\"],\n",
    "    \"Fence\": [\"MnWw\", \"GdWo\", \"MnPrv\", \"GdPrv\"],\n",
    "}\n",
    "\n",
    "# Add a None level for missing values\n",
    "ordered_levels = {key: [\"None\"] + value for key, value in\n",
    "                  ordered_levels.items()}\n",
    "\n",
    "# Continuous Features\n",
    "features_con = [\n",
    "    'LotFrontage',     # Linear feet of street connected to property\n",
    "    'LotArea',         # Lot size in square feet\n",
    "    'MasVnrArea',      # Masonry veneer area in square feet\n",
    "    'BsmtFinSF1',      # Type 1 finished square feet\n",
    "    'BsmtFinSF2',      # Type 2 finished square feet\n",
    "    'BsmtUnfSF',       # Unfinished square feet of basement area\n",
    "    'TotalBsmtSF',     # Total square feet of basement area\n",
    "    '1stFlrSF',        # First floor square feet\n",
    "    '2ndFlrSF',        # Second floor square feet\n",
    "    'LowQualFinSF',    # Low quality finished square feet\n",
    "    'GrLivArea',       #Above grade (ground) living area square feet\n",
    "    'GarageArea',      # Garage area in square feet\n",
    "    'WoodDeckSF',      # Wood deck area in square feet\n",
    "    'OpenPorchSF',     # Open porch area in square feet\n",
    "    'EnclosedPorch',   # Enclosed porch area in square feet\n",
    "    '3SsnPorch',       # Three season porch area in square feet\n",
    "    'ScreenPorch',     # Screen porch area in square feet\n",
    "    'PoolArea',        # Pool area in square feet\n",
    "    'MiscVal',         # Value of miscellaneous feature\n",
    "]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "0d773393",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:59:26.587631Z",
     "iopub.status.busy": "2024-10-22T11:59:26.587218Z",
     "iopub.status.idle": "2024-10-22T11:59:26.595423Z",
     "shell.execute_reply": "2024-10-22T11:59:26.594104Z"
    },
    "papermill": {
     "duration": 0.030817,
     "end_time": "2024-10-22T11:59:26.597748",
     "exception": false,
     "start_time": "2024-10-22T11:59:26.566931",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def encode(X, y=None):\n",
    "    # Nominal categories\n",
    "    for nominal in features_nom:\n",
    "        X[nominal] = X[nominal].astype(\"category\")\n",
    "        # Add a None category for missing values\n",
    "        if \"None\" not in X[nominal].cat.categories:\n",
    "            X[nominal] = X[nominal].cat.add_categories(\"None\")\n",
    "    \n",
    "    # Ordinal categories\n",
    "    for ordinal, levels in ordered_levels.items():\n",
    "        X[ordinal] = X[ordinal].astype(CategoricalDtype(levels, ordered=True))\n",
    "\n",
    "    # Continuous features\n",
    "    for name in features_con:\n",
    "        X[name] = X[name].astype(\"float64\")\n",
    "\n",
    "    # Converting categorical features to its code\n",
    "    for name in X.select_dtypes([\"category\"]):\n",
    "        X[name] = X[name].cat.codes\n",
    "\n",
    "    # Changing SalePrice dtype to float64\n",
    "    if y is not None:\n",
    "        y = y.astype('float64')\n",
    "        return X, y\n",
    "\n",
    "    return X"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "40f86f37",
   "metadata": {
    "papermill": {
     "duration": 0.017171,
     "end_time": "2024-10-22T11:59:26.631874",
     "exception": false,
     "start_time": "2024-10-22T11:59:26.614703",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Imputer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "3aa94c14",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:59:26.669325Z",
     "iopub.status.busy": "2024-10-22T11:59:26.668144Z",
     "iopub.status.idle": "2024-10-22T11:59:26.674627Z",
     "shell.execute_reply": "2024-10-22T11:59:26.673382Z"
    },
    "papermill": {
     "duration": 0.027322,
     "end_time": "2024-10-22T11:59:26.676991",
     "exception": false,
     "start_time": "2024-10-22T11:59:26.649669",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def impute(X):\n",
    "    for numerical in X.select_dtypes(\"number\"):\n",
    "        X[numerical] = X[numerical].fillna(0)\n",
    "    for categorical in X.select_dtypes(\"category\"):\n",
    "        X[categorical] = X[categorical].fillna(\"None\")\n",
    "    return X"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "25f7e82c",
   "metadata": {
    "papermill": {
     "duration": 0.016553,
     "end_time": "2024-10-22T11:59:26.710441",
     "exception": false,
     "start_time": "2024-10-22T11:59:26.693888",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Dataset scorer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "2a33d115",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:59:26.746498Z",
     "iopub.status.busy": "2024-10-22T11:59:26.746042Z",
     "iopub.status.idle": "2024-10-22T11:59:26.752793Z",
     "shell.execute_reply": "2024-10-22T11:59:26.751419Z"
    },
    "papermill": {
     "duration": 0.028107,
     "end_time": "2024-10-22T11:59:26.755245",
     "exception": false,
     "start_time": "2024-10-22T11:59:26.727138",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def score_dataset(X, y, model=GradientBoostingRegressor()):\n",
    "    log_y = np.log(y)\n",
    "    score = cross_val_score(\n",
    "        model, X, log_y, cv=5, scoring=\"neg_mean_squared_error\",\n",
    "    )\n",
    "    score = -1 * score.mean()\n",
    "    score = np.sqrt(score)\n",
    "    return score"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0a7eb55c",
   "metadata": {
    "papermill": {
     "duration": 0.016729,
     "end_time": "2024-10-22T11:59:26.788891",
     "exception": false,
     "start_time": "2024-10-22T11:59:26.772162",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Data Cleaning"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "96cff55d",
   "metadata": {
    "papermill": {
     "duration": 0.016681,
     "end_time": "2024-10-22T11:59:26.822628",
     "exception": false,
     "start_time": "2024-10-22T11:59:26.805947",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Handling missing values"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "57a302b7",
   "metadata": {
    "papermill": {
     "duration": 0.016799,
     "end_time": "2024-10-22T11:59:26.856087",
     "exception": false,
     "start_time": "2024-10-22T11:59:26.839288",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "This section will focus on deciding between whether the data is NaN because simply it doesn't exist (NE) or wasn't recorded (NR)."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "47eefa8d",
   "metadata": {
    "papermill": {
     "duration": 0.016878,
     "end_time": "2024-10-22T11:59:26.889902",
     "exception": false,
     "start_time": "2024-10-22T11:59:26.873024",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Numerical"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "26b130ac",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:59:26.925363Z",
     "iopub.status.busy": "2024-10-22T11:59:26.924900Z",
     "iopub.status.idle": "2024-10-22T11:59:26.936155Z",
     "shell.execute_reply": "2024-10-22T11:59:26.935023Z"
    },
    "papermill": {
     "duration": 0.032088,
     "end_time": "2024-10-22T11:59:26.938541",
     "exception": false,
     "start_time": "2024-10-22T11:59:26.906453",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LotFrontage    259\n",
       "MasVnrArea       8\n",
       "GarageYrBlt     81\n",
       "dtype: int64"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "numerical_null = raw_data.select_dtypes(['int64', 'float64']).isnull().sum()\n",
    "numerical_null[numerical_null > 0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "ea10ff23",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:59:26.974196Z",
     "iopub.status.busy": "2024-10-22T11:59:26.973771Z",
     "iopub.status.idle": "2024-10-22T11:59:26.988119Z",
     "shell.execute_reply": "2024-10-22T11:59:26.986706Z"
    },
    "papermill": {
     "duration": 0.035134,
     "end_time": "2024-10-22T11:59:26.990592",
     "exception": false,
     "start_time": "2024-10-22T11:59:26.955458",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>MasVnrType</th>\n",
       "      <th>MasVnrArea</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>234</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>529</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>650</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>936</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>973</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>977</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1243</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1278</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     MasVnrType  MasVnrArea\n",
       "234         NaN         NaN\n",
       "529         NaN         NaN\n",
       "650         NaN         NaN\n",
       "936         NaN         NaN\n",
       "973         NaN         NaN\n",
       "977         NaN         NaN\n",
       "1243        NaN         NaN\n",
       "1278        NaN         NaN"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "raw_data[['MasVnrType', 'MasVnrArea']][raw_data.MasVnrArea.isnull()]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "1efdbba6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:59:27.026436Z",
     "iopub.status.busy": "2024-10-22T11:59:27.026028Z",
     "iopub.status.idle": "2024-10-22T11:59:27.032866Z",
     "shell.execute_reply": "2024-10-22T11:59:27.031878Z"
    },
    "papermill": {
     "duration": 0.027395,
     "end_time": "2024-10-22T11:59:27.035013",
     "exception": false,
     "start_time": "2024-10-22T11:59:27.007618",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "raw_data.MasVnrArea[raw_data.MasVnrArea.isnull()] = 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "c837468e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:59:27.071881Z",
     "iopub.status.busy": "2024-10-22T11:59:27.070531Z",
     "iopub.status.idle": "2024-10-22T11:59:27.077251Z",
     "shell.execute_reply": "2024-10-22T11:59:27.076211Z"
    },
    "papermill": {
     "duration": 0.027534,
     "end_time": "2024-10-22T11:59:27.079492",
     "exception": false,
     "start_time": "2024-10-22T11:59:27.051958",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "raw_data['GarageYrBlt'].fillna(0, inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "899a4a56",
   "metadata": {
    "papermill": {
     "duration": 0.016807,
     "end_time": "2024-10-22T11:59:27.113584",
     "exception": false,
     "start_time": "2024-10-22T11:59:27.096777",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "* LotFrontage: NR\n",
    "* MasVnrArea: NE (because its MasVnrType are all NaN). proceed to replace it with 0\n",
    "* GarageYrBlt: NE (all garage-related var has 81 misval--not exists)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c59f047e",
   "metadata": {
    "papermill": {
     "duration": 0.017079,
     "end_time": "2024-10-22T11:59:27.148615",
     "exception": false,
     "start_time": "2024-10-22T11:59:27.131536",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Categorical"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "692e997a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:59:27.184773Z",
     "iopub.status.busy": "2024-10-22T11:59:27.184324Z",
     "iopub.status.idle": "2024-10-22T11:59:27.199113Z",
     "shell.execute_reply": "2024-10-22T11:59:27.197676Z"
    },
    "papermill": {
     "duration": 0.035651,
     "end_time": "2024-10-22T11:59:27.201469",
     "exception": false,
     "start_time": "2024-10-22T11:59:27.165818",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Alley           1369\n",
       "MasVnrType       872\n",
       "BsmtQual          37\n",
       "BsmtCond          37\n",
       "BsmtExposure      38\n",
       "BsmtFinType1      37\n",
       "BsmtFinType2      38\n",
       "Electrical         1\n",
       "FireplaceQu      690\n",
       "GarageType        81\n",
       "GarageFinish      81\n",
       "GarageQual        81\n",
       "GarageCond        81\n",
       "PoolQC          1453\n",
       "Fence           1179\n",
       "MiscFeature     1406\n",
       "dtype: int64"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "categorical_null = raw_data.select_dtypes(['object']).isnull().sum()\n",
    "categorical_null[categorical_null > 0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "f22bb261",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:59:27.239327Z",
     "iopub.status.busy": "2024-10-22T11:59:27.238275Z",
     "iopub.status.idle": "2024-10-22T11:59:27.247486Z",
     "shell.execute_reply": "2024-10-22T11:59:27.246348Z"
    },
    "papermill": {
     "duration": 0.029807,
     "end_time": "2024-10-22T11:59:27.249774",
     "exception": false,
     "start_time": "2024-10-22T11:59:27.219967",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "867"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "raw_data.MasVnrType[raw_data.MasVnrArea == 0].isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "96a0fd69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:59:27.286542Z",
     "iopub.status.busy": "2024-10-22T11:59:27.285630Z",
     "iopub.status.idle": "2024-10-22T11:59:27.294270Z",
     "shell.execute_reply": "2024-10-22T11:59:27.293137Z"
    },
    "papermill": {
     "duration": 0.029325,
     "end_time": "2024-10-22T11:59:27.296525",
     "exception": false,
     "start_time": "2024-10-22T11:59:27.267200",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "raw_data.MasVnrType[raw_data.MasVnrArea > 0].isnull().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b583a53d",
   "metadata": {
    "papermill": {
     "duration": 0.016933,
     "end_time": "2024-10-22T11:59:27.330757",
     "exception": false,
     "start_time": "2024-10-22T11:59:27.313824",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "***MasVnrType: 867 NE; 5 NR***"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "7d81f4e3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:59:27.367549Z",
     "iopub.status.busy": "2024-10-22T11:59:27.366690Z",
     "iopub.status.idle": "2024-10-22T11:59:27.380390Z",
     "shell.execute_reply": "2024-10-22T11:59:27.379139Z"
    },
    "papermill": {
     "duration": 0.034992,
     "end_time": "2024-10-22T11:59:27.383041",
     "exception": false,
     "start_time": "2024-10-22T11:59:27.348049",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>BsmtCond</th>\n",
       "      <th>BsmtExposure</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>948</th>\n",
       "      <td>TA</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    BsmtCond BsmtExposure\n",
       "948       TA          NaN"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "raw_data.loc[:, ['BsmtCond', 'BsmtExposure']][(raw_data.BsmtExposure.isnull()) & (raw_data.BsmtCond.notnull())]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "de6ecdcb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:59:27.420390Z",
     "iopub.status.busy": "2024-10-22T11:59:27.419955Z",
     "iopub.status.idle": "2024-10-22T11:59:27.428945Z",
     "shell.execute_reply": "2024-10-22T11:59:27.427702Z"
    },
    "papermill": {
     "duration": 0.030494,
     "end_time": "2024-10-22T11:59:27.431354",
     "exception": false,
     "start_time": "2024-10-22T11:59:27.400860",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'No'"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "raw_data.loc[948, 'BsmtExposure'] = raw_data.BsmtExposure.mode()[0]\n",
    "raw_data.loc[948, 'BsmtExposure']"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d19a91e6",
   "metadata": {
    "papermill": {
     "duration": 0.017193,
     "end_time": "2024-10-22T11:59:27.466511",
     "exception": false,
     "start_time": "2024-10-22T11:59:27.449318",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "***BsmtExposure: 37 NE; 1 NR***\n",
    "\n",
    "All data that has a basement always has its BsmntExposure, but only this data point has a basement but not BsmtExposure. It will, then, be replaced with BsmtExposure mode-'No': No Exposure."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "b4c8b710",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:59:27.503738Z",
     "iopub.status.busy": "2024-10-22T11:59:27.503269Z",
     "iopub.status.idle": "2024-10-22T11:59:27.515882Z",
     "shell.execute_reply": "2024-10-22T11:59:27.514803Z"
    },
    "papermill": {
     "duration": 0.033996,
     "end_time": "2024-10-22T11:59:27.518167",
     "exception": false,
     "start_time": "2024-10-22T11:59:27.484171",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>BsmtFinSF2</th>\n",
       "      <th>BsmtFinType2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>332</th>\n",
       "      <td>479</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     BsmtFinSF2 BsmtFinType2\n",
       "332         479          NaN"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "raw_data.loc[:, ['BsmtFinSF2', 'BsmtFinType2']][(raw_data.BsmtFinSF2 > 0) & (raw_data.BsmtFinType2.isnull())]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "9029e178",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:59:27.556595Z",
     "iopub.status.busy": "2024-10-22T11:59:27.556184Z",
     "iopub.status.idle": "2024-10-22T11:59:27.565442Z",
     "shell.execute_reply": "2024-10-22T11:59:27.564170Z"
    },
    "papermill": {
     "duration": 0.030689,
     "end_time": "2024-10-22T11:59:27.567586",
     "exception": false,
     "start_time": "2024-10-22T11:59:27.536897",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Rec'"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "raw_data.loc[332, 'BsmtFinType2'] = raw_data.BsmtFinType2[raw_data.BsmtFinSF2 > 0].mode()[0]\n",
    "raw_data.loc[332, 'BsmtFinType2']"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c15b1f86",
   "metadata": {
    "papermill": {
     "duration": 0.017953,
     "end_time": "2024-10-22T11:59:27.605024",
     "exception": false,
     "start_time": "2024-10-22T11:59:27.587071",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "***BsmtFinType2: 37 NE; 1 NR***\n",
    "\n",
    "For BsmtFinType2, the mode is indeed 'Unf', but isn't reasonable to impute it with 'Unf' when its BsmtFinSF2 is > 0. ('Unf' is for BsmtFinSF2 == 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "b4a526ce",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:59:27.643313Z",
     "iopub.status.busy": "2024-10-22T11:59:27.642359Z",
     "iopub.status.idle": "2024-10-22T11:59:27.651301Z",
     "shell.execute_reply": "2024-10-22T11:59:27.650247Z"
    },
    "papermill": {
     "duration": 0.030575,
     "end_time": "2024-10-22T11:59:27.653598",
     "exception": false,
     "start_time": "2024-10-22T11:59:27.623023",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "690"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "raw_data.FireplaceQu[raw_data.Fireplaces == 0].isnull().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e884a7b1",
   "metadata": {
    "papermill": {
     "duration": 0.017993,
     "end_time": "2024-10-22T11:59:27.689693",
     "exception": false,
     "start_time": "2024-10-22T11:59:27.671700",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "***FireplaceQu: 690 NE***"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "8dd92bde",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:59:27.727541Z",
     "iopub.status.busy": "2024-10-22T11:59:27.727108Z",
     "iopub.status.idle": "2024-10-22T11:59:27.736282Z",
     "shell.execute_reply": "2024-10-22T11:59:27.735239Z"
    },
    "papermill": {
     "duration": 0.030755,
     "end_time": "2024-10-22T11:59:27.738533",
     "exception": false,
     "start_time": "2024-10-22T11:59:27.707778",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "197     512\n",
       "810     648\n",
       "1170    576\n",
       "1182    555\n",
       "1298    480\n",
       "1386    519\n",
       "1423    738\n",
       "Name: PoolArea, dtype: int64"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "raw_data.PoolArea[raw_data.PoolArea > 0]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f24cc7de",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T09:25:37.994900Z",
     "iopub.status.busy": "2024-10-22T09:25:37.994391Z",
     "iopub.status.idle": "2024-10-22T09:25:38.005199Z",
     "shell.execute_reply": "2024-10-22T09:25:38.002748Z",
     "shell.execute_reply.started": "2024-10-22T09:25:37.994852Z"
    },
    "papermill": {
     "duration": 0.017875,
     "end_time": "2024-10-22T11:59:27.774585",
     "exception": false,
     "start_time": "2024-10-22T11:59:27.756710",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "***PoolQC: 1453 NE***\n",
    "\n",
    "There's only 7 non-null values in the variable PoolQC because only 7 rows have PoolArea > 0, meaning that simply only 7 houses in the data have a pool. Therefore, the 0s in PoolArea will be left as-is, while the NaN in PoolQC will be converted to the lowest ordinal category-0."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "dc15a919",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:59:27.812227Z",
     "iopub.status.busy": "2024-10-22T11:59:27.811774Z",
     "iopub.status.idle": "2024-10-22T11:59:27.820545Z",
     "shell.execute_reply": "2024-10-22T11:59:27.819290Z"
    },
    "papermill": {
     "duration": 0.030463,
     "end_time": "2024-10-22T11:59:27.822922",
     "exception": false,
     "start_time": "2024-10-22T11:59:27.792459",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "raw_data.MiscFeature[raw_data.MiscVal > 0].isnull().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c488c6e4",
   "metadata": {
    "papermill": {
     "duration": 0.0183,
     "end_time": "2024-10-22T11:59:27.859526",
     "exception": false,
     "start_time": "2024-10-22T11:59:27.841226",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "***MiscFeature: 1406 NE***"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "40a3acab",
   "metadata": {
    "papermill": {
     "duration": 0.018295,
     "end_time": "2024-10-22T11:59:27.896448",
     "exception": false,
     "start_time": "2024-10-22T11:59:27.878153",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "* Alley: *potentially* NE (the variable has 'None' category)\n",
    "* MasVnrType: 867 NE; 5 NR\n",
    "* BsmtQual: NE\n",
    "* BsmtCond: NE\n",
    "* BsmtExposure: 37 NE; 1 NR\n",
    "* BsmtFinType1: NE\n",
    "* BsmtFinType2: 37 NE; 1 NR\n",
    "* Electrical: NR\n",
    "* FireplaceQu: NE (Fireplaces also has 690 0s)\n",
    "* GarageType: NE\n",
    "* GarageFinish: NE\n",
    "* GarageQual: NE\n",
    "* GarageCond: NE\n",
    "* PoolQC: NE\n",
    "* Fence: *potentially* NE (the variable has 'None' category)\n",
    "* MiscFeature:  NE (MiscVal has no > 0 with NaN MiscFeature)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "d01c1171",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:59:27.937023Z",
     "iopub.status.busy": "2024-10-22T11:59:27.936542Z",
     "iopub.status.idle": "2024-10-22T11:59:27.943860Z",
     "shell.execute_reply": "2024-10-22T11:59:27.942735Z"
    },
    "papermill": {
     "duration": 0.030044,
     "end_time": "2024-10-22T11:59:27.946329",
     "exception": false,
     "start_time": "2024-10-22T11:59:27.916285",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "experimential_data = raw_data.copy()\n",
    "train_data = raw_data.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "04fedd14",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:59:27.986130Z",
     "iopub.status.busy": "2024-10-22T11:59:27.984794Z",
     "iopub.status.idle": "2024-10-22T11:59:28.051707Z",
     "shell.execute_reply": "2024-10-22T11:59:28.050231Z"
    },
    "papermill": {
     "duration": 0.089615,
     "end_time": "2024-10-22T11:59:28.054366",
     "exception": false,
     "start_time": "2024-10-22T11:59:27.964751",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X = experimential_data.drop('SalePrice', axis=1)\n",
    "y = experimential_data.SalePrice\n",
    "X_encoded, y_encoded = encode(X, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "929729b7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:59:28.093087Z",
     "iopub.status.busy": "2024-10-22T11:59:28.092673Z",
     "iopub.status.idle": "2024-10-22T11:59:28.111348Z",
     "shell.execute_reply": "2024-10-22T11:59:28.110311Z"
    },
    "papermill": {
     "duration": 0.040786,
     "end_time": "2024-10-22T11:59:28.113935",
     "exception": false,
     "start_time": "2024-10-22T11:59:28.073149",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X_imputed = impute(X_encoded)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "4708a591",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:59:28.152479Z",
     "iopub.status.busy": "2024-10-22T11:59:28.152067Z",
     "iopub.status.idle": "2024-10-22T11:59:28.162509Z",
     "shell.execute_reply": "2024-10-22T11:59:28.161470Z"
    },
    "papermill": {
     "duration": 0.032967,
     "end_time": "2024-10-22T11:59:28.165321",
     "exception": false,
     "start_time": "2024-10-22T11:59:28.132354",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "data = X_imputed.join(y_encoded)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d12b745e",
   "metadata": {
    "papermill": {
     "duration": 0.018156,
     "end_time": "2024-10-22T11:59:28.202243",
     "exception": false,
     "start_time": "2024-10-22T11:59:28.184087",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Data Visualization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "33c244b3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T09:35:01.086682Z",
     "iopub.status.busy": "2024-10-22T09:35:01.086181Z",
     "iopub.status.idle": "2024-10-22T09:35:01.095772Z",
     "shell.execute_reply": "2024-10-22T09:35:01.093698Z",
     "shell.execute_reply.started": "2024-10-22T09:35:01.086633Z"
    },
    "papermill": {
     "duration": 0.018173,
     "end_time": "2024-10-22T11:59:28.239239",
     "exception": false,
     "start_time": "2024-10-22T11:59:28.221066",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "uncomment to show"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e6e8d7ff",
   "metadata": {
    "papermill": {
     "duration": 0.018054,
     "end_time": "2024-10-22T11:59:28.275498",
     "exception": false,
     "start_time": "2024-10-22T11:59:28.257444",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Target"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "bb727a4c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:59:28.313563Z",
     "iopub.status.busy": "2024-10-22T11:59:28.313173Z",
     "iopub.status.idle": "2024-10-22T11:59:28.317810Z",
     "shell.execute_reply": "2024-10-22T11:59:28.316728Z"
    },
    "jupyter": {
     "source_hidden": true
    },
    "papermill": {
     "duration": 0.02673,
     "end_time": "2024-10-22T11:59:28.320419",
     "exception": false,
     "start_time": "2024-10-22T11:59:28.293689",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# sns.distplot(data.SalePrice)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f0ddc771",
   "metadata": {
    "papermill": {
     "duration": 0.018548,
     "end_time": "2024-10-22T11:59:28.357850",
     "exception": false,
     "start_time": "2024-10-22T11:59:28.339302",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Features"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d9f0355f",
   "metadata": {
    "papermill": {
     "duration": 0.018559,
     "end_time": "2024-10-22T11:59:28.395267",
     "exception": false,
     "start_time": "2024-10-22T11:59:28.376708",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Categorical"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "37d9d587",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:59:28.435154Z",
     "iopub.status.busy": "2024-10-22T11:59:28.434721Z",
     "iopub.status.idle": "2024-10-22T11:59:28.439676Z",
     "shell.execute_reply": "2024-10-22T11:59:28.438579Z"
    },
    "jupyter": {
     "source_hidden": true
    },
    "papermill": {
     "duration": 0.027923,
     "end_time": "2024-10-22T11:59:28.442117",
     "exception": false,
     "start_time": "2024-10-22T11:59:28.414194",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# categoricals = data.select_dtypes(['int8'])\n",
    "# categoricals"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f3f066ec",
   "metadata": {
    "papermill": {
     "duration": 0.018061,
     "end_time": "2024-10-22T11:59:28.478858",
     "exception": false,
     "start_time": "2024-10-22T11:59:28.460797",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "***Nominal***"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "21092e6c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:59:28.517654Z",
     "iopub.status.busy": "2024-10-22T11:59:28.516664Z",
     "iopub.status.idle": "2024-10-22T11:59:28.522057Z",
     "shell.execute_reply": "2024-10-22T11:59:28.520982Z"
    },
    "jupyter": {
     "source_hidden": true
    },
    "papermill": {
     "duration": 0.027721,
     "end_time": "2024-10-22T11:59:28.524745",
     "exception": false,
     "start_time": "2024-10-22T11:59:28.497024",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# sns.set(style=\"whitegrid\")\n",
    "\n",
    "# # Define number of rows and columns for the subplots grid\n",
    "# num_cols = 3  # Number of plots per row\n",
    "# num_rows = (len(features_nom) + num_cols - 1) // num_cols  # Calculate required rows\n",
    "\n",
    "# # Create the figure and axis objects for the grid\n",
    "# fig, axes = plt.subplots(num_rows, num_cols, figsize=(16, num_rows * 5))\n",
    "\n",
    "# # Flatten the axes array for easier indexing\n",
    "# axes = axes.flatten()\n",
    "\n",
    "# # Create a violin plot for each categorical variable\n",
    "# for i, nominal in enumerate(features_nom):\n",
    "#     sns.violinplot(x=data[nominal], y=data['SalePrice'], ax=axes[i])\n",
    "#     axes[i].set_title(nominal)\n",
    "\n",
    "# # Hide any unused subplots\n",
    "# for j in range(i + 1, len(axes)):\n",
    "#     fig.delaxes(axes[j])\n",
    "\n",
    "# plt.tight_layout()\n",
    "# plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0999b862",
   "metadata": {
    "papermill": {
     "duration": 0.018299,
     "end_time": "2024-10-22T11:59:28.562502",
     "exception": false,
     "start_time": "2024-10-22T11:59:28.544203",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "***Ordinal***"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "9e1921e3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:59:28.603169Z",
     "iopub.status.busy": "2024-10-22T11:59:28.602757Z",
     "iopub.status.idle": "2024-10-22T11:59:28.608353Z",
     "shell.execute_reply": "2024-10-22T11:59:28.607011Z"
    },
    "jupyter": {
     "source_hidden": true
    },
    "papermill": {
     "duration": 0.028406,
     "end_time": "2024-10-22T11:59:28.610834",
     "exception": false,
     "start_time": "2024-10-22T11:59:28.582428",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# sns.set(style=\"whitegrid\")\n",
    "\n",
    "# # Define number of rows and columns for the subplots grid\n",
    "# num_cols = 3  # Number of plots per row\n",
    "# num_rows = (len(ordered_levels) + num_cols - 1) // num_cols  # Calculate required rows\n",
    "\n",
    "# # Create the figure and axis objects for the grid\n",
    "# fig, axes = plt.subplots(num_rows, num_cols, figsize=(16, num_rows * 5))\n",
    "\n",
    "# # Flatten the axes array for easier indexing\n",
    "# axes = axes.flatten()\n",
    "\n",
    "# # Create a violin plot for each categorical variable\n",
    "# for i, nominal in enumerate(ordered_levels):\n",
    "#     sns.violinplot(x=data[nominal], y=data['SalePrice'], ax=axes[i])\n",
    "#     axes[i].set_title(nominal)\n",
    "\n",
    "# # Hide any unused subplots\n",
    "# for j in range(i + 1, len(axes)):\n",
    "#     fig.delaxes(axes[j])\n",
    "\n",
    "# plt.tight_layout()\n",
    "# plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "15c7f60a",
   "metadata": {
    "papermill": {
     "duration": 0.018171,
     "end_time": "2024-10-22T11:59:28.647742",
     "exception": false,
     "start_time": "2024-10-22T11:59:28.629571",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Numerical"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "192f1183",
   "metadata": {
    "papermill": {
     "duration": 0.018299,
     "end_time": "2024-10-22T11:59:28.684463",
     "exception": false,
     "start_time": "2024-10-22T11:59:28.666164",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "***Histogram***"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "7b6111fb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:59:28.723574Z",
     "iopub.status.busy": "2024-10-22T11:59:28.723159Z",
     "iopub.status.idle": "2024-10-22T11:59:28.727959Z",
     "shell.execute_reply": "2024-10-22T11:59:28.726865Z"
    },
    "jupyter": {
     "source_hidden": true
    },
    "papermill": {
     "duration": 0.027171,
     "end_time": "2024-10-22T11:59:28.730418",
     "exception": false,
     "start_time": "2024-10-22T11:59:28.703247",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# data_numerical = data.select_dtypes(include=['float64', 'int64'])\n",
    "# data_numerical.hist(figsize=(20, 25), bins=50)\n",
    "# data_numerical.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0c3d33e8",
   "metadata": {
    "papermill": {
     "duration": 0.017914,
     "end_time": "2024-10-22T11:59:28.766763",
     "exception": false,
     "start_time": "2024-10-22T11:59:28.748849",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "***Correlation Map***"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "e58e0af6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:59:28.805013Z",
     "iopub.status.busy": "2024-10-22T11:59:28.804570Z",
     "iopub.status.idle": "2024-10-22T11:59:28.809480Z",
     "shell.execute_reply": "2024-10-22T11:59:28.808422Z"
    },
    "jupyter": {
     "source_hidden": true
    },
    "papermill": {
     "duration": 0.02682,
     "end_time": "2024-10-22T11:59:28.811840",
     "exception": false,
     "start_time": "2024-10-22T11:59:28.785020",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# def corrplot(df, method=\"pearson\", annot=True, **kwargs):\n",
    "#     sns.clustermap(\n",
    "#         df.corr(method, numeric_only=True),\n",
    "#         vmin=-1.0,\n",
    "#         vmax=1.0,\n",
    "#         cmap=\"icefire\",\n",
    "#         method=\"complete\",\n",
    "#         annot=annot,\n",
    "#         **kwargs,\n",
    "#     )\n",
    "\n",
    "# corrplot(data_numerical, annot=None)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4d6462ba",
   "metadata": {
    "papermill": {
     "duration": 0.018205,
     "end_time": "2024-10-22T11:59:28.849514",
     "exception": false,
     "start_time": "2024-10-22T11:59:28.831309",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Feature Engineering"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "73a59aa9",
   "metadata": {
    "papermill": {
     "duration": 0.072838,
     "end_time": "2024-10-22T11:59:28.940964",
     "exception": false,
     "start_time": "2024-10-22T11:59:28.868126",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Establishing a baseline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "9fa0cec2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:59:28.979671Z",
     "iopub.status.busy": "2024-10-22T11:59:28.979227Z",
     "iopub.status.idle": "2024-10-22T11:59:32.591015Z",
     "shell.execute_reply": "2024-10-22T11:59:32.589905Z"
    },
    "papermill": {
     "duration": 3.633933,
     "end_time": "2024-10-22T11:59:32.593472",
     "exception": false,
     "start_time": "2024-10-22T11:59:28.959539",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.12854934569299847"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X = data.drop('SalePrice', axis=1)\n",
    "y = data.SalePrice\n",
    "baseline = score_dataset(X, y)\n",
    "baseline"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85244a96",
   "metadata": {
    "papermill": {
     "duration": 0.019155,
     "end_time": "2024-10-22T11:59:32.633051",
     "exception": false,
     "start_time": "2024-10-22T11:59:32.613896",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Mutual Information"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "47feda27",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:59:32.672771Z",
     "iopub.status.busy": "2024-10-22T11:59:32.671619Z",
     "iopub.status.idle": "2024-10-22T11:59:33.720649Z",
     "shell.execute_reply": "2024-10-22T11:59:33.719552Z"
    },
    "papermill": {
     "duration": 1.071289,
     "end_time": "2024-10-22T11:59:33.723032",
     "exception": false,
     "start_time": "2024-10-22T11:59:32.651743",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "OverallQual     0.572\n",
       "Neighborhood    0.530\n",
       "GrLivArea       0.484\n",
       "YearBuilt       0.409\n",
       "TotalBsmtSF     0.365\n",
       "                ...  \n",
       "LotConfig       0.004\n",
       "LandSlope       0.003\n",
       "Condition2      0.002\n",
       "MiscVal         0.001\n",
       "Street          0.001\n",
       "Name: MI Scores, Length: 73, dtype: float64"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def make_mi_scores(X, y):\n",
    "    \n",
    "    discrete_features = [pd.api.types.is_integer_dtype(t) for t in X.dtypes]\n",
    "    mi_scores = mutual_info_regression(X, y, discrete_features=discrete_features).round(3)\n",
    "    mi_scores = pd.Series(mi_scores, name=\"MI Scores\", index=X.columns)\n",
    "    mi_scores = mi_scores.sort_values(ascending=False)\n",
    "    return mi_scores\n",
    "\n",
    "def plot_mi_scores(scores):\n",
    "    scores = scores.sort_values(ascending=True)\n",
    "    width = np.arange(len(scores))\n",
    "    ticks = list(scores.index)\n",
    "    plt.barh(width, scores)\n",
    "    plt.yticks(width, ticks)\n",
    "    plt.title(\"Mutual Information Scores\")\n",
    "\n",
    "X = data.drop('SalePrice', axis=1)\n",
    "y = data.SalePrice\n",
    "\n",
    "mi_scores = make_mi_scores(X, y)\n",
    "mi_scores[mi_scores > 0.0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "dff92902",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:59:33.762443Z",
     "iopub.status.busy": "2024-10-22T11:59:33.762011Z",
     "iopub.status.idle": "2024-10-22T11:59:33.767928Z",
     "shell.execute_reply": "2024-10-22T11:59:33.766687Z"
    },
    "papermill": {
     "duration": 0.028505,
     "end_time": "2024-10-22T11:59:33.770222",
     "exception": false,
     "start_time": "2024-10-22T11:59:33.741717",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def drop_uninformative(X, mi_scores=mi_scores):\n",
    "    mi_scores = mi_scores.reindex(X.columns)\n",
    "    X = X.loc[:, mi_scores > 0.0]\n",
    "    return X"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "bfffd0cf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:59:33.809382Z",
     "iopub.status.busy": "2024-10-22T11:59:33.808937Z",
     "iopub.status.idle": "2024-10-22T11:59:37.211100Z",
     "shell.execute_reply": "2024-10-22T11:59:37.210075Z"
    },
    "papermill": {
     "duration": 3.424874,
     "end_time": "2024-10-22T11:59:37.213746",
     "exception": false,
     "start_time": "2024-10-22T11:59:33.788872",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.12856829037276862"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_informative = data.copy()\n",
    "X = data_informative.drop('SalePrice', axis=1)\n",
    "y = data_informative.SalePrice\n",
    "X = drop_uninformative(X)\n",
    "data_informative = X.join(y)\n",
    "score_dataset(X, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "aa56d3c0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:59:37.253885Z",
     "iopub.status.busy": "2024-10-22T11:59:37.253454Z",
     "iopub.status.idle": "2024-10-22T11:59:37.258409Z",
     "shell.execute_reply": "2024-10-22T11:59:37.257389Z"
    },
    "jupyter": {
     "source_hidden": true
    },
    "papermill": {
     "duration": 0.027293,
     "end_time": "2024-10-22T11:59:37.260696",
     "exception": false,
     "start_time": "2024-10-22T11:59:37.233403",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# plot_mi_scores(mi_scores)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bc627920",
   "metadata": {
    "papermill": {
     "duration": 0.018499,
     "end_time": "2024-10-22T11:59:37.297878",
     "exception": false,
     "start_time": "2024-10-22T11:59:37.279379",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Principal Component Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "9db453bc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:59:37.337028Z",
     "iopub.status.busy": "2024-10-22T11:59:37.336312Z",
     "iopub.status.idle": "2024-10-22T11:59:37.351047Z",
     "shell.execute_reply": "2024-10-22T11:59:37.349933Z"
    },
    "papermill": {
     "duration": 0.037225,
     "end_time": "2024-10-22T11:59:37.353623",
     "exception": false,
     "start_time": "2024-10-22T11:59:37.316398",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.decomposition import PCA\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "\n",
    "\n",
    "def apply_pca(X, scaler=None, pca=None, test=False, standardize=True):\n",
    "    loadings_index = X.columns\n",
    "\n",
    "    if scaler is None:\n",
    "        scaler = StandardScaler()\n",
    "    \n",
    "    if standardize and not test:\n",
    "        X = scaler.fit_transform(X)\n",
    "    else:\n",
    "        X = scaler.transform(X)\n",
    "\n",
    "    if pca is None:\n",
    "        pca = PCA()\n",
    "        \n",
    "    if not test:\n",
    "        X_pca = pca.fit_transform(X)\n",
    "    else:\n",
    "        X_pca = pca.transform(X)\n",
    "        \n",
    "    # Convert to dataframe\n",
    "    component_names = [f\"PC{i+1}\" for i in range(X_pca.shape[1])]\n",
    "    X_pca = pd.DataFrame(X_pca, columns=component_names)\n",
    "    \n",
    "    # Create loadings\n",
    "    loadings = pd.DataFrame(\n",
    "        pca.components_.T,  # transpose the matrix of loadings\n",
    "        columns=component_names,  # so the columns are the principal components\n",
    "        index=loadings_index,  # and the rows are the original features\n",
    "    )\n",
    "\n",
    "    \n",
    "    return scaler, pca, X_pca, loadings\n",
    "\n",
    "\n",
    "def plot_variance(pca, width=8, dpi=100):\n",
    "    # Create figure\n",
    "    fig, axs = plt.subplots(1, 2)\n",
    "    n = pca.n_components_\n",
    "    grid = np.arange(1, n + 1)\n",
    "    \n",
    "    # Explained variance\n",
    "    evr = pca.explained_variance_ratio_\n",
    "    axs[0].bar(grid, evr)\n",
    "    axs[0].set(\n",
    "        xlabel=\"Component\", title=\"% Explained Variance\", ylim=(0.0, 1.0)\n",
    "    )\n",
    "    \n",
    "    # Cumulative Variance\n",
    "    cv = np.cumsum(evr)\n",
    "    axs[1].plot(np.r_[0, grid], np.r_[0, cv], \"o-\")\n",
    "    axs[1].set(\n",
    "        xlabel=\"Component\", title=\"% Cumulative Variance\", ylim=(0.0, 1.0)\n",
    "    )\n",
    "    \n",
    "    # Set up figure\n",
    "    fig.set(figwidth=8, dpi=100)\n",
    "    return axs\n",
    "\n",
    "def pca_components(X, features, scaler=None, pca=None, test=False):\n",
    "    X_pca_features = X.loc[:, features]\n",
    "    if not test:\n",
    "        scaler, pca, X_pca, pca_loadings = apply_pca(X_pca_features, test=False)\n",
    "    else:\n",
    "        scaler, pca, X_pca, pca_loadings = apply_pca(X_pca_features, scaler=scaler, pca=pca, test=True)\n",
    "    X_w_pca = X.drop(columns=features, errors='ignore')\n",
    "    X_w_pca = X_w_pca.join(X_pca)\n",
    "    \n",
    "    return scaler, pca, X_w_pca, pca_loadings\n",
    "\n",
    "pca_features =['GrLivArea', 'GarageCars', 'TotalBsmtSF', 'YearBuilt', 'LotArea']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "ec3cbfb0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:59:37.392749Z",
     "iopub.status.busy": "2024-10-22T11:59:37.391896Z",
     "iopub.status.idle": "2024-10-22T11:59:41.169439Z",
     "shell.execute_reply": "2024-10-22T11:59:41.168180Z"
    },
    "papermill": {
     "duration": 3.800098,
     "end_time": "2024-10-22T11:59:41.172265",
     "exception": false,
     "start_time": "2024-10-22T11:59:37.372167",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.12425486291493172"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X = data_informative.drop('SalePrice', axis=1)\n",
    "y = data_informative.SalePrice\n",
    "\n",
    "scaler, pca, X_w_pca, loadings = pca_components(X, pca_features)\n",
    "data_w_pca = X_w_pca.join(y)\n",
    "score_dataset(X_w_pca, y)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "112b67a9",
   "metadata": {
    "papermill": {
     "duration": 0.019745,
     "end_time": "2024-10-22T11:59:41.211127",
     "exception": false,
     "start_time": "2024-10-22T11:59:41.191382",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Final create_features function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "7613cd8c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:59:41.251563Z",
     "iopub.status.busy": "2024-10-22T11:59:41.251164Z",
     "iopub.status.idle": "2024-10-22T11:59:41.258366Z",
     "shell.execute_reply": "2024-10-22T11:59:41.257074Z"
    },
    "papermill": {
     "duration": 0.03031,
     "end_time": "2024-10-22T11:59:41.260937",
     "exception": false,
     "start_time": "2024-10-22T11:59:41.230627",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def create_features(X, y=None, scaler=None, pca=None, test=False):\n",
    "    X_encoded = encode(X, y)\n",
    "    X_imputed = impute(X_encoded)\n",
    "    X_informative = drop_uninformative(X_imputed)\n",
    "    if not test:\n",
    "        scaler, pca, X_w_pca, _ = pca_components(X_informative, pca_features, test)\n",
    "        return scaler, pca, X_w_pca\n",
    "    else:\n",
    "        _, _, X_w_pca, _ = pca_components(X_informative, pca_features, scaler=scaler, pca=pca, test=True)\n",
    "        return X_w_pca"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d5333461",
   "metadata": {
    "papermill": {
     "duration": 0.018806,
     "end_time": "2024-10-22T11:59:41.298745",
     "exception": false,
     "start_time": "2024-10-22T11:59:41.279939",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Model Building"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "0636fddc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:59:41.338167Z",
     "iopub.status.busy": "2024-10-22T11:59:41.337527Z",
     "iopub.status.idle": "2024-10-22T11:59:42.354659Z",
     "shell.execute_reply": "2024-10-22T11:59:42.353413Z"
    },
    "papermill": {
     "duration": 1.039999,
     "end_time": "2024-10-22T11:59:42.357408",
     "exception": false,
     "start_time": "2024-10-22T11:59:41.317409",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GradientBoostingRegressor()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GradientBoostingRegressor</label><div class=\"sk-toggleable__content\"><pre>GradientBoostingRegressor()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "GradientBoostingRegressor()"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "scaler, pca, X_train = create_features(train_data.drop('SalePrice', axis=1), test=False)\n",
    "y_train = train_data.SalePrice\n",
    "\n",
    "model = GradientBoostingRegressor()\n",
    "model.fit(X_train, np.log(y_train))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "fad0b043",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:59:42.398420Z",
     "iopub.status.busy": "2024-10-22T11:59:42.397955Z",
     "iopub.status.idle": "2024-10-22T11:59:42.410564Z",
     "shell.execute_reply": "2024-10-22T11:59:42.409521Z"
    },
    "papermill": {
     "duration": 0.036169,
     "end_time": "2024-10-22T11:59:42.413445",
     "exception": false,
     "start_time": "2024-10-22T11:59:42.377276",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "log_SalePrice_train_pred = model.predict(X_train)\n",
    "\n",
    "log_SalePrice_train = np.log(y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "ebcfad93",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:59:42.454041Z",
     "iopub.status.busy": "2024-10-22T11:59:42.453590Z",
     "iopub.status.idle": "2024-10-22T11:59:42.812561Z",
     "shell.execute_reply": "2024-10-22T11:59:42.811218Z"
    },
    "papermill": {
     "duration": 0.382055,
     "end_time": "2024-10-22T11:59:42.814817",
     "exception": false,
     "start_time": "2024-10-22T11:59:42.432762",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 400x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(4, 4))\n",
    "plt.scatter(log_SalePrice_train, log_SalePrice_train_pred, alpha=0.5)\n",
    "plt.plot([min(log_SalePrice_train), max(log_SalePrice_train)], [min(log_SalePrice_train), max(log_SalePrice_train)], color='red', linestyle='--')\n",
    "plt.title('Predicted vs Actual log_SalePrice')\n",
    "plt.xlabel('Actual log_SalePrice')\n",
    "plt.ylabel('Predicted log_SalePrice')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "741a6136",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:59:42.857041Z",
     "iopub.status.busy": "2024-10-22T11:59:42.856584Z",
     "iopub.status.idle": "2024-10-22T11:59:42.866308Z",
     "shell.execute_reply": "2024-10-22T11:59:42.865221Z"
    },
    "papermill": {
     "duration": 0.033359,
     "end_time": "2024-10-22T11:59:42.868661",
     "exception": false,
     "start_time": "2024-10-22T11:59:42.835302",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9587275913165632"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "r2_score(log_SalePrice_train, log_SalePrice_train_pred)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ca2fed95",
   "metadata": {
    "papermill": {
     "duration": 0.019825,
     "end_time": "2024-10-22T11:59:42.909361",
     "exception": false,
     "start_time": "2024-10-22T11:59:42.889536",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Hyperparameter tuning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "d69ac815",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:59:42.952932Z",
     "iopub.status.busy": "2024-10-22T11:59:42.951484Z",
     "iopub.status.idle": "2024-10-22T11:59:42.958001Z",
     "shell.execute_reply": "2024-10-22T11:59:42.956785Z"
    },
    "papermill": {
     "duration": 0.030563,
     "end_time": "2024-10-22T11:59:42.960576",
     "exception": false,
     "start_time": "2024-10-22T11:59:42.930013",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# search_space = {\n",
    "#     \"n_estimators\": [100, 500, 1000],           # number of trees\n",
    "#     \"learning_rate\": [0.01, 0.1],               # effect of each tree\n",
    "#     \"max_depth\": [3, 5, 7],                     # limit depth to common best performers\n",
    "#     \"min_samples_split\": [5, 10],               # smaller range of values\n",
    "#     \"min_samples_leaf\": [1, 2],                 # smaller range of values\n",
    "#     \"subsample\": [0.8, 1.0],                    # reduce to fewer options\n",
    "#     \"max_features\": ['sqrt']                    # only try one common option\n",
    "# }\n",
    "\n",
    "# GS = GridSearchCV(estimator=model, param_grid=search_space, scoring=['r2', 'neg_root_mean_squared_error'], refit='neg_root_mean_squared_error', cv=5, verbose=4)\n",
    "# GS.fit(X_train, np.log(y_train))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "e98110b8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:59:43.002663Z",
     "iopub.status.busy": "2024-10-22T11:59:43.002246Z",
     "iopub.status.idle": "2024-10-22T11:59:45.058065Z",
     "shell.execute_reply": "2024-10-22T11:59:45.057000Z"
    },
    "papermill": {
     "duration": 2.079681,
     "end_time": "2024-10-22T11:59:45.060522",
     "exception": false,
     "start_time": "2024-10-22T11:59:42.980841",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GradientBoostingRegressor(learning_rate=0.01, max_depth=5, max_features=&#x27;sqrt&#x27;,\n",
       "                          min_samples_leaf=2, min_samples_split=10,\n",
       "                          n_estimators=1000, subsample=0.8)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GradientBoostingRegressor</label><div class=\"sk-toggleable__content\"><pre>GradientBoostingRegressor(learning_rate=0.01, max_depth=5, max_features=&#x27;sqrt&#x27;,\n",
       "                          min_samples_leaf=2, min_samples_split=10,\n",
       "                          n_estimators=1000, subsample=0.8)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "GradientBoostingRegressor(learning_rate=0.01, max_depth=5, max_features='sqrt',\n",
       "                          min_samples_leaf=2, min_samples_split=10,\n",
       "                          n_estimators=1000, subsample=0.8)"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Best parameters:\n",
    "model = GradientBoostingRegressor(learning_rate=0.01, max_depth=5, max_features='sqrt', min_samples_leaf=2, min_samples_split=10, n_estimators=1000, subsample=0.8)\n",
    "\n",
    "model.fit(X_train, np.log(y_train))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "1443790d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:59:45.102970Z",
     "iopub.status.busy": "2024-10-22T11:59:45.102380Z",
     "iopub.status.idle": "2024-10-22T11:59:45.157176Z",
     "shell.execute_reply": "2024-10-22T11:59:45.156032Z"
    },
    "papermill": {
     "duration": 0.079192,
     "end_time": "2024-10-22T11:59:45.160077",
     "exception": false,
     "start_time": "2024-10-22T11:59:45.080885",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "log_SalePrice_train_pred = model.predict(X_train)\n",
    "log_SalePrice_train = np.log(y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "00e62e1f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:59:45.204167Z",
     "iopub.status.busy": "2024-10-22T11:59:45.203717Z",
     "iopub.status.idle": "2024-10-22T11:59:45.513142Z",
     "shell.execute_reply": "2024-10-22T11:59:45.512138Z"
    },
    "papermill": {
     "duration": 0.334845,
     "end_time": "2024-10-22T11:59:45.516170",
     "exception": false,
     "start_time": "2024-10-22T11:59:45.181325",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 400x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(4, 4))\n",
    "plt.scatter(log_SalePrice_train, log_SalePrice_train_pred, alpha=0.5)\n",
    "plt.plot([min(log_SalePrice_train), max(log_SalePrice_train)], [min(log_SalePrice_train), max(log_SalePrice_train)], color='red', linestyle='--')\n",
    "plt.title('Predicted vs Actual log_SalePrice')\n",
    "plt.xlabel('Actual log_SalePrice')\n",
    "plt.ylabel('Predicted log_SalePrice')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "4a7c1ad4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:59:45.562378Z",
     "iopub.status.busy": "2024-10-22T11:59:45.561520Z",
     "iopub.status.idle": "2024-10-22T11:59:45.570298Z",
     "shell.execute_reply": "2024-10-22T11:59:45.569191Z"
    },
    "papermill": {
     "duration": 0.034896,
     "end_time": "2024-10-22T11:59:45.572719",
     "exception": false,
     "start_time": "2024-10-22T11:59:45.537823",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9797920173781407"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "r2_score(log_SalePrice_train, log_SalePrice_train_pred)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "38928a99",
   "metadata": {
    "papermill": {
     "duration": 0.021013,
     "end_time": "2024-10-22T11:59:45.614992",
     "exception": false,
     "start_time": "2024-10-22T11:59:45.593979",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Sumbission"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "2f38fa42",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:59:45.661487Z",
     "iopub.status.busy": "2024-10-22T11:59:45.660466Z",
     "iopub.status.idle": "2024-10-22T11:59:45.830993Z",
     "shell.execute_reply": "2024-10-22T11:59:45.829745Z"
    },
    "papermill": {
     "duration": 0.19733,
     "end_time": "2024-10-22T11:59:45.833632",
     "exception": false,
     "start_time": "2024-10-22T11:59:45.636302",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>SalePrice</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1461</td>\n",
       "      <td>120485.076490</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1462</td>\n",
       "      <td>154875.987096</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1463</td>\n",
       "      <td>176830.374593</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1464</td>\n",
       "      <td>187395.737903</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1465</td>\n",
       "      <td>191833.776529</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Id      SalePrice\n",
       "0  1461  120485.076490\n",
       "1  1462  154875.987096\n",
       "2  1463  176830.374593\n",
       "3  1464  187395.737903\n",
       "4  1465  191833.776529"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_file_path = \"../input/house-prices-advanced-regression-techniques/test.csv\"\n",
    "test_data = pd.read_csv(test_file_path)\n",
    "ids = test_data.Id\n",
    "\n",
    "test_data = create_features(test_data, scaler=scaler, pca=pca, test=True)\n",
    "\n",
    "for colname in test_data.select_dtypes([\"category\"]):\n",
    "        test_data[colname] = test_data[colname].cat.codes\n",
    "\n",
    "preds = np.exp(model.predict(test_data))\n",
    "output = pd.DataFrame({'Id': ids,\n",
    "                       'SalePrice': preds.squeeze()})\n",
    "\n",
    "output.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "12033eb6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:59:45.878809Z",
     "iopub.status.busy": "2024-10-22T11:59:45.878379Z",
     "iopub.status.idle": "2024-10-22T11:59:45.946257Z",
     "shell.execute_reply": "2024-10-22T11:59:45.944950Z"
    },
    "papermill": {
     "duration": 0.093213,
     "end_time": "2024-10-22T11:59:45.948694",
     "exception": false,
     "start_time": "2024-10-22T11:59:45.855481",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>SalePrice</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1461</td>\n",
       "      <td>120485.076490</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1462</td>\n",
       "      <td>154875.987096</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1463</td>\n",
       "      <td>176830.374593</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1464</td>\n",
       "      <td>187395.737903</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1465</td>\n",
       "      <td>191833.776529</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Id      SalePrice\n",
       "0  1461  120485.076490\n",
       "1  1462  154875.987096\n",
       "2  1463  176830.374593\n",
       "3  1464  187395.737903\n",
       "4  1465  191833.776529"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sample_submission_df = pd.read_csv('../input/house-prices-advanced-regression-techniques/sample_submission.csv')\n",
    "sample_submission_df['SalePrice'] = np.exp(model.predict(test_data))\n",
    "sample_submission_df.to_csv('/kaggle/working/submission.csv', index=False)\n",
    "sample_submission_df.head()"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 868283,
     "sourceId": 5407,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 30786,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 26.656466,
   "end_time": "2024-10-22T11:59:46.693339",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-10-22T11:59:20.036873",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
