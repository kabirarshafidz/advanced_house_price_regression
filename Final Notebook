{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "0c1f6f4c",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-10-22T11:53:22.611529Z",
     "iopub.status.busy": "2024-10-22T11:53:22.611077Z",
     "iopub.status.idle": "2024-10-22T11:53:25.872303Z",
     "shell.execute_reply": "2024-10-22T11:53:25.871113Z"
    },
    "papermill": {
     "duration": 3.294647,
     "end_time": "2024-10-22T11:53:25.875286",
     "exception": false,
     "start_time": "2024-10-22T11:53:22.580639",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/house-prices-advanced-regression-techniques/sample_submission.csv\n",
      "/kaggle/input/house-prices-advanced-regression-techniques/data_description.txt\n",
      "/kaggle/input/house-prices-advanced-regression-techniques/train.csv\n",
      "/kaggle/input/house-prices-advanced-regression-techniques/test.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "from pandas.api.types import CategoricalDtype\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "from sklearn.model_selection import cross_val_score\n",
    "\n",
    "from sklearn.ensemble import GradientBoostingRegressor\n",
    "\n",
    "from sklearn.feature_selection import mutual_info_regression\n",
    "from sklearn.decomposition import PCA\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "\n",
    "from sklearn.metrics import r2_score\n",
    "\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")\n",
    "\n",
    "\n",
    "sns.set()\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "        \n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2c3aee97",
   "metadata": {
    "papermill": {
     "duration": 0.023222,
     "end_time": "2024-10-22T11:53:25.923466",
     "exception": false,
     "start_time": "2024-10-22T11:53:25.900244",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Data Loading"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "2dce0366",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:53:25.972462Z",
     "iopub.status.busy": "2024-10-22T11:53:25.971577Z",
     "iopub.status.idle": "2024-10-22T11:53:26.042162Z",
     "shell.execute_reply": "2024-10-22T11:53:26.041051Z"
    },
    "papermill": {
     "duration": 0.098165,
     "end_time": "2024-10-22T11:53:26.045059",
     "exception": false,
     "start_time": "2024-10-22T11:53:25.946894",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "raw_data = pd.read_csv('/kaggle/input/house-prices-advanced-regression-techniques/train.csv', index_col='Id')\n",
    "raw_data.reset_index(drop=True, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "a2c0b279",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:53:26.094316Z",
     "iopub.status.busy": "2024-10-22T11:53:26.093841Z",
     "iopub.status.idle": "2024-10-22T11:53:26.201924Z",
     "shell.execute_reply": "2024-10-22T11:53:26.200742Z"
    },
    "papermill": {
     "duration": 0.135448,
     "end_time": "2024-10-22T11:53:26.204414",
     "exception": false,
     "start_time": "2024-10-22T11:53:26.068966",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>MSSubClass</th>\n",
       "      <th>LotFrontage</th>\n",
       "      <th>LotArea</th>\n",
       "      <th>OverallQual</th>\n",
       "      <th>OverallCond</th>\n",
       "      <th>YearBuilt</th>\n",
       "      <th>YearRemodAdd</th>\n",
       "      <th>MasVnrArea</th>\n",
       "      <th>BsmtFinSF1</th>\n",
       "      <th>BsmtFinSF2</th>\n",
       "      <th>...</th>\n",
       "      <th>WoodDeckSF</th>\n",
       "      <th>OpenPorchSF</th>\n",
       "      <th>EnclosedPorch</th>\n",
       "      <th>3SsnPorch</th>\n",
       "      <th>ScreenPorch</th>\n",
       "      <th>PoolArea</th>\n",
       "      <th>MiscVal</th>\n",
       "      <th>MoSold</th>\n",
       "      <th>YrSold</th>\n",
       "      <th>SalePrice</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1201.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1452.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>56.897260</td>\n",
       "      <td>70.049958</td>\n",
       "      <td>10516.828082</td>\n",
       "      <td>6.099315</td>\n",
       "      <td>5.575342</td>\n",
       "      <td>1971.267808</td>\n",
       "      <td>1984.865753</td>\n",
       "      <td>103.685262</td>\n",
       "      <td>443.639726</td>\n",
       "      <td>46.549315</td>\n",
       "      <td>...</td>\n",
       "      <td>94.244521</td>\n",
       "      <td>46.660274</td>\n",
       "      <td>21.954110</td>\n",
       "      <td>3.409589</td>\n",
       "      <td>15.060959</td>\n",
       "      <td>2.758904</td>\n",
       "      <td>43.489041</td>\n",
       "      <td>6.321918</td>\n",
       "      <td>2007.815753</td>\n",
       "      <td>180921.195890</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>42.300571</td>\n",
       "      <td>24.284752</td>\n",
       "      <td>9981.264932</td>\n",
       "      <td>1.382997</td>\n",
       "      <td>1.112799</td>\n",
       "      <td>30.202904</td>\n",
       "      <td>20.645407</td>\n",
       "      <td>181.066207</td>\n",
       "      <td>456.098091</td>\n",
       "      <td>161.319273</td>\n",
       "      <td>...</td>\n",
       "      <td>125.338794</td>\n",
       "      <td>66.256028</td>\n",
       "      <td>61.119149</td>\n",
       "      <td>29.317331</td>\n",
       "      <td>55.757415</td>\n",
       "      <td>40.177307</td>\n",
       "      <td>496.123024</td>\n",
       "      <td>2.703626</td>\n",
       "      <td>1.328095</td>\n",
       "      <td>79442.502883</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>20.000000</td>\n",
       "      <td>21.000000</td>\n",
       "      <td>1300.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1872.000000</td>\n",
       "      <td>1950.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2006.000000</td>\n",
       "      <td>34900.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>20.000000</td>\n",
       "      <td>59.000000</td>\n",
       "      <td>7553.500000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>1954.000000</td>\n",
       "      <td>1967.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>2007.000000</td>\n",
       "      <td>129975.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>50.000000</td>\n",
       "      <td>69.000000</td>\n",
       "      <td>9478.500000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>1973.000000</td>\n",
       "      <td>1994.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>383.500000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>25.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>2008.000000</td>\n",
       "      <td>163000.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>70.000000</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>11601.500000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>2000.000000</td>\n",
       "      <td>2004.000000</td>\n",
       "      <td>166.000000</td>\n",
       "      <td>712.250000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>168.000000</td>\n",
       "      <td>68.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>2009.000000</td>\n",
       "      <td>214000.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>190.000000</td>\n",
       "      <td>313.000000</td>\n",
       "      <td>215245.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>2010.000000</td>\n",
       "      <td>2010.000000</td>\n",
       "      <td>1600.000000</td>\n",
       "      <td>5644.000000</td>\n",
       "      <td>1474.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>857.000000</td>\n",
       "      <td>547.000000</td>\n",
       "      <td>552.000000</td>\n",
       "      <td>508.000000</td>\n",
       "      <td>480.000000</td>\n",
       "      <td>738.000000</td>\n",
       "      <td>15500.000000</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>2010.000000</td>\n",
       "      <td>755000.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8 rows × 37 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        MSSubClass  LotFrontage        LotArea  OverallQual  OverallCond  \\\n",
       "count  1460.000000  1201.000000    1460.000000  1460.000000  1460.000000   \n",
       "mean     56.897260    70.049958   10516.828082     6.099315     5.575342   \n",
       "std      42.300571    24.284752    9981.264932     1.382997     1.112799   \n",
       "min      20.000000    21.000000    1300.000000     1.000000     1.000000   \n",
       "25%      20.000000    59.000000    7553.500000     5.000000     5.000000   \n",
       "50%      50.000000    69.000000    9478.500000     6.000000     5.000000   \n",
       "75%      70.000000    80.000000   11601.500000     7.000000     6.000000   \n",
       "max     190.000000   313.000000  215245.000000    10.000000     9.000000   \n",
       "\n",
       "         YearBuilt  YearRemodAdd   MasVnrArea   BsmtFinSF1   BsmtFinSF2  ...  \\\n",
       "count  1460.000000   1460.000000  1452.000000  1460.000000  1460.000000  ...   \n",
       "mean   1971.267808   1984.865753   103.685262   443.639726    46.549315  ...   \n",
       "std      30.202904     20.645407   181.066207   456.098091   161.319273  ...   \n",
       "min    1872.000000   1950.000000     0.000000     0.000000     0.000000  ...   \n",
       "25%    1954.000000   1967.000000     0.000000     0.000000     0.000000  ...   \n",
       "50%    1973.000000   1994.000000     0.000000   383.500000     0.000000  ...   \n",
       "75%    2000.000000   2004.000000   166.000000   712.250000     0.000000  ...   \n",
       "max    2010.000000   2010.000000  1600.000000  5644.000000  1474.000000  ...   \n",
       "\n",
       "        WoodDeckSF  OpenPorchSF  EnclosedPorch    3SsnPorch  ScreenPorch  \\\n",
       "count  1460.000000  1460.000000    1460.000000  1460.000000  1460.000000   \n",
       "mean     94.244521    46.660274      21.954110     3.409589    15.060959   \n",
       "std     125.338794    66.256028      61.119149    29.317331    55.757415   \n",
       "min       0.000000     0.000000       0.000000     0.000000     0.000000   \n",
       "25%       0.000000     0.000000       0.000000     0.000000     0.000000   \n",
       "50%       0.000000    25.000000       0.000000     0.000000     0.000000   \n",
       "75%     168.000000    68.000000       0.000000     0.000000     0.000000   \n",
       "max     857.000000   547.000000     552.000000   508.000000   480.000000   \n",
       "\n",
       "          PoolArea       MiscVal       MoSold       YrSold      SalePrice  \n",
       "count  1460.000000   1460.000000  1460.000000  1460.000000    1460.000000  \n",
       "mean      2.758904     43.489041     6.321918  2007.815753  180921.195890  \n",
       "std      40.177307    496.123024     2.703626     1.328095   79442.502883  \n",
       "min       0.000000      0.000000     1.000000  2006.000000   34900.000000  \n",
       "25%       0.000000      0.000000     5.000000  2007.000000  129975.000000  \n",
       "50%       0.000000      0.000000     6.000000  2008.000000  163000.000000  \n",
       "75%       0.000000      0.000000     8.000000  2009.000000  214000.000000  \n",
       "max     738.000000  15500.000000    12.000000  2010.000000  755000.000000  \n",
       "\n",
       "[8 rows x 37 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "raw_data.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "7aef4335",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:53:26.256001Z",
     "iopub.status.busy": "2024-10-22T11:53:26.255068Z",
     "iopub.status.idle": "2024-10-22T11:53:26.287662Z",
     "shell.execute_reply": "2024-10-22T11:53:26.286307Z"
    },
    "papermill": {
     "duration": 0.061084,
     "end_time": "2024-10-22T11:53:26.290568",
     "exception": false,
     "start_time": "2024-10-22T11:53:26.229484",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1460 entries, 0 to 1459\n",
      "Data columns (total 80 columns):\n",
      " #   Column         Non-Null Count  Dtype  \n",
      "---  ------         --------------  -----  \n",
      " 0   MSSubClass     1460 non-null   int64  \n",
      " 1   MSZoning       1460 non-null   object \n",
      " 2   LotFrontage    1201 non-null   float64\n",
      " 3   LotArea        1460 non-null   int64  \n",
      " 4   Street         1460 non-null   object \n",
      " 5   Alley          91 non-null     object \n",
      " 6   LotShape       1460 non-null   object \n",
      " 7   LandContour    1460 non-null   object \n",
      " 8   Utilities      1460 non-null   object \n",
      " 9   LotConfig      1460 non-null   object \n",
      " 10  LandSlope      1460 non-null   object \n",
      " 11  Neighborhood   1460 non-null   object \n",
      " 12  Condition1     1460 non-null   object \n",
      " 13  Condition2     1460 non-null   object \n",
      " 14  BldgType       1460 non-null   object \n",
      " 15  HouseStyle     1460 non-null   object \n",
      " 16  OverallQual    1460 non-null   int64  \n",
      " 17  OverallCond    1460 non-null   int64  \n",
      " 18  YearBuilt      1460 non-null   int64  \n",
      " 19  YearRemodAdd   1460 non-null   int64  \n",
      " 20  RoofStyle      1460 non-null   object \n",
      " 21  RoofMatl       1460 non-null   object \n",
      " 22  Exterior1st    1460 non-null   object \n",
      " 23  Exterior2nd    1460 non-null   object \n",
      " 24  MasVnrType     588 non-null    object \n",
      " 25  MasVnrArea     1452 non-null   float64\n",
      " 26  ExterQual      1460 non-null   object \n",
      " 27  ExterCond      1460 non-null   object \n",
      " 28  Foundation     1460 non-null   object \n",
      " 29  BsmtQual       1423 non-null   object \n",
      " 30  BsmtCond       1423 non-null   object \n",
      " 31  BsmtExposure   1422 non-null   object \n",
      " 32  BsmtFinType1   1423 non-null   object \n",
      " 33  BsmtFinSF1     1460 non-null   int64  \n",
      " 34  BsmtFinType2   1422 non-null   object \n",
      " 35  BsmtFinSF2     1460 non-null   int64  \n",
      " 36  BsmtUnfSF      1460 non-null   int64  \n",
      " 37  TotalBsmtSF    1460 non-null   int64  \n",
      " 38  Heating        1460 non-null   object \n",
      " 39  HeatingQC      1460 non-null   object \n",
      " 40  CentralAir     1460 non-null   object \n",
      " 41  Electrical     1459 non-null   object \n",
      " 42  1stFlrSF       1460 non-null   int64  \n",
      " 43  2ndFlrSF       1460 non-null   int64  \n",
      " 44  LowQualFinSF   1460 non-null   int64  \n",
      " 45  GrLivArea      1460 non-null   int64  \n",
      " 46  BsmtFullBath   1460 non-null   int64  \n",
      " 47  BsmtHalfBath   1460 non-null   int64  \n",
      " 48  FullBath       1460 non-null   int64  \n",
      " 49  HalfBath       1460 non-null   int64  \n",
      " 50  BedroomAbvGr   1460 non-null   int64  \n",
      " 51  KitchenAbvGr   1460 non-null   int64  \n",
      " 52  KitchenQual    1460 non-null   object \n",
      " 53  TotRmsAbvGrd   1460 non-null   int64  \n",
      " 54  Functional     1460 non-null   object \n",
      " 55  Fireplaces     1460 non-null   int64  \n",
      " 56  FireplaceQu    770 non-null    object \n",
      " 57  GarageType     1379 non-null   object \n",
      " 58  GarageYrBlt    1379 non-null   float64\n",
      " 59  GarageFinish   1379 non-null   object \n",
      " 60  GarageCars     1460 non-null   int64  \n",
      " 61  GarageArea     1460 non-null   int64  \n",
      " 62  GarageQual     1379 non-null   object \n",
      " 63  GarageCond     1379 non-null   object \n",
      " 64  PavedDrive     1460 non-null   object \n",
      " 65  WoodDeckSF     1460 non-null   int64  \n",
      " 66  OpenPorchSF    1460 non-null   int64  \n",
      " 67  EnclosedPorch  1460 non-null   int64  \n",
      " 68  3SsnPorch      1460 non-null   int64  \n",
      " 69  ScreenPorch    1460 non-null   int64  \n",
      " 70  PoolArea       1460 non-null   int64  \n",
      " 71  PoolQC         7 non-null      object \n",
      " 72  Fence          281 non-null    object \n",
      " 73  MiscFeature    54 non-null     object \n",
      " 74  MiscVal        1460 non-null   int64  \n",
      " 75  MoSold         1460 non-null   int64  \n",
      " 76  YrSold         1460 non-null   int64  \n",
      " 77  SaleType       1460 non-null   object \n",
      " 78  SaleCondition  1460 non-null   object \n",
      " 79  SalePrice      1460 non-null   int64  \n",
      "dtypes: float64(3), int64(34), object(43)\n",
      "memory usage: 912.6+ KB\n"
     ]
    }
   ],
   "source": [
    "raw_data.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "198406d8",
   "metadata": {
    "papermill": {
     "duration": 0.024075,
     "end_time": "2024-10-22T11:53:26.338949",
     "exception": false,
     "start_time": "2024-10-22T11:53:26.314874",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Utils"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1a8b21a5",
   "metadata": {
    "papermill": {
     "duration": 0.023558,
     "end_time": "2024-10-22T11:53:26.386541",
     "exception": false,
     "start_time": "2024-10-22T11:53:26.362983",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Encoder"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "75723ecd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:53:26.437120Z",
     "iopub.status.busy": "2024-10-22T11:53:26.436186Z",
     "iopub.status.idle": "2024-10-22T11:53:26.451424Z",
     "shell.execute_reply": "2024-10-22T11:53:26.450238Z"
    },
    "papermill": {
     "duration": 0.043614,
     "end_time": "2024-10-22T11:53:26.453989",
     "exception": false,
     "start_time": "2024-10-22T11:53:26.410375",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Nominal Features\n",
    "features_nom = [\"MSSubClass\", \"MSZoning\", \"Street\", \"Alley\", \"LandContour\", \"LotConfig\", \"Neighborhood\", \"Condition1\", \"Condition2\", \"BldgType\", \"HouseStyle\", \"RoofStyle\", \"RoofMatl\", \"Exterior1st\", \"Exterior2nd\", \"MasVnrType\", \"Foundation\", \"Heating\", \"CentralAir\", \"GarageType\", \"MiscFeature\", \"SaleType\", \"SaleCondition\"]\n",
    "\n",
    "\n",
    "# Ordinal Features\n",
    "# The ordinal (ordered) categorical features \n",
    "# Pandas calls the categories \"levels\"\n",
    "five_levels = [\"Po\", \"Fa\", \"TA\", \"Gd\", \"Ex\"]\n",
    "ten_levels = list(range(10))\n",
    "\n",
    "ordered_levels = {\n",
    "    \"OverallQual\": ten_levels,\n",
    "    \"OverallCond\": ten_levels,\n",
    "    \"ExterQual\": five_levels,\n",
    "    \"ExterCond\": five_levels,\n",
    "    \"BsmtQual\": five_levels,\n",
    "    \"BsmtCond\": five_levels,\n",
    "    \"HeatingQC\": five_levels,\n",
    "    \"KitchenQual\": five_levels,\n",
    "    \"FireplaceQu\": five_levels,\n",
    "    \"GarageQual\": five_levels,\n",
    "    \"GarageCond\": five_levels,\n",
    "    \"PoolQC\": five_levels,\n",
    "    \"LotShape\": [\"Reg\", \"IR1\", \"IR2\", \"IR3\"],\n",
    "    \"LandSlope\": [\"Sev\", \"Mod\", \"Gtl\"],\n",
    "    \"BsmtExposure\": [\"No\", \"Mn\", \"Av\", \"Gd\"],\n",
    "    \"BsmtFinType1\": [\"Unf\", \"LwQ\", \"Rec\", \"BLQ\", \"ALQ\", \"GLQ\"],\n",
    "    \"BsmtFinType2\": [\"Unf\", \"LwQ\", \"Rec\", \"BLQ\", \"ALQ\", \"GLQ\"],\n",
    "    \"Functional\": [\"Sal\", \"Sev\", \"Maj1\", \"Maj2\", \"Mod\", \"Min2\", \"Min1\", \"Typ\"],\n",
    "    \"GarageFinish\": [\"Unf\", \"RFn\", \"Fin\"],\n",
    "    \"PavedDrive\": [\"N\", \"P\", \"Y\"],\n",
    "    \"Utilities\": [\"NoSeWa\", \"NoSewr\", \"AllPub\"],\n",
    "    \"CentralAir\": [\"N\", \"Y\"],\n",
    "    \"Electrical\": [\"Mix\", \"FuseP\", \"FuseF\", \"FuseA\", \"SBrkr\"],\n",
    "    \"Fence\": [\"MnWw\", \"GdWo\", \"MnPrv\", \"GdPrv\"],\n",
    "}\n",
    "\n",
    "# Add a None level for missing values\n",
    "ordered_levels = {key: [\"None\"] + value for key, value in\n",
    "                  ordered_levels.items()}\n",
    "\n",
    "# Continuous Features\n",
    "features_con = [\n",
    "    'LotFrontage',     # Linear feet of street connected to property\n",
    "    'LotArea',         # Lot size in square feet\n",
    "    'MasVnrArea',      # Masonry veneer area in square feet\n",
    "    'BsmtFinSF1',      # Type 1 finished square feet\n",
    "    'BsmtFinSF2',      # Type 2 finished square feet\n",
    "    'BsmtUnfSF',       # Unfinished square feet of basement area\n",
    "    'TotalBsmtSF',     # Total square feet of basement area\n",
    "    '1stFlrSF',        # First floor square feet\n",
    "    '2ndFlrSF',        # Second floor square feet\n",
    "    'LowQualFinSF',    # Low quality finished square feet\n",
    "    'GrLivArea',       #Above grade (ground) living area square feet\n",
    "    'GarageArea',      # Garage area in square feet\n",
    "    'WoodDeckSF',      # Wood deck area in square feet\n",
    "    'OpenPorchSF',     # Open porch area in square feet\n",
    "    'EnclosedPorch',   # Enclosed porch area in square feet\n",
    "    '3SsnPorch',       # Three season porch area in square feet\n",
    "    'ScreenPorch',     # Screen porch area in square feet\n",
    "    'PoolArea',        # Pool area in square feet\n",
    "    'MiscVal',         # Value of miscellaneous feature\n",
    "]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "d8d7bc39",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:53:26.504885Z",
     "iopub.status.busy": "2024-10-22T11:53:26.504417Z",
     "iopub.status.idle": "2024-10-22T11:53:26.514046Z",
     "shell.execute_reply": "2024-10-22T11:53:26.512827Z"
    },
    "papermill": {
     "duration": 0.037853,
     "end_time": "2024-10-22T11:53:26.516617",
     "exception": false,
     "start_time": "2024-10-22T11:53:26.478764",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def encode(X, y=None):\n",
    "    # Nominal categories\n",
    "    for nominal in features_nom:\n",
    "        X[nominal] = X[nominal].astype(\"category\")\n",
    "        # Add a None category for missing values\n",
    "        if \"None\" not in X[nominal].cat.categories:\n",
    "            X[nominal] = X[nominal].cat.add_categories(\"None\")\n",
    "    \n",
    "    # Ordinal categories\n",
    "    for ordinal, levels in ordered_levels.items():\n",
    "        X[ordinal] = X[ordinal].astype(CategoricalDtype(levels, ordered=True))\n",
    "\n",
    "    # Continuous features\n",
    "    for name in features_con:\n",
    "        X[name] = X[name].astype(\"float64\")\n",
    "\n",
    "    # Converting categorical features to its code\n",
    "    for name in X.select_dtypes([\"category\"]):\n",
    "        X[name] = X[name].cat.codes\n",
    "\n",
    "    # Changing SalePrice dtype to float64\n",
    "    if y is not None:\n",
    "        y = y.astype('float64')\n",
    "        return X, y\n",
    "\n",
    "    return X"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "960cfd6c",
   "metadata": {
    "papermill": {
     "duration": 0.023747,
     "end_time": "2024-10-22T11:53:26.564440",
     "exception": false,
     "start_time": "2024-10-22T11:53:26.540693",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Imputer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "0ad53a7e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:53:26.614119Z",
     "iopub.status.busy": "2024-10-22T11:53:26.613688Z",
     "iopub.status.idle": "2024-10-22T11:53:26.620611Z",
     "shell.execute_reply": "2024-10-22T11:53:26.619438Z"
    },
    "papermill": {
     "duration": 0.034614,
     "end_time": "2024-10-22T11:53:26.623024",
     "exception": false,
     "start_time": "2024-10-22T11:53:26.588410",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def impute(X):\n",
    "    for numerical in X.select_dtypes(\"number\"):\n",
    "        X[numerical] = X[numerical].fillna(0)\n",
    "    for categorical in X.select_dtypes(\"category\"):\n",
    "        X[categorical] = X[categorical].fillna(\"None\")\n",
    "    return X"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f32600ca",
   "metadata": {
    "papermill": {
     "duration": 0.024723,
     "end_time": "2024-10-22T11:53:26.672134",
     "exception": false,
     "start_time": "2024-10-22T11:53:26.647411",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Dataset scorer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "ee7f9556",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:53:26.724237Z",
     "iopub.status.busy": "2024-10-22T11:53:26.723805Z",
     "iopub.status.idle": "2024-10-22T11:53:26.730325Z",
     "shell.execute_reply": "2024-10-22T11:53:26.729233Z"
    },
    "papermill": {
     "duration": 0.035472,
     "end_time": "2024-10-22T11:53:26.732736",
     "exception": false,
     "start_time": "2024-10-22T11:53:26.697264",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def score_dataset(X, y, model=GradientBoostingRegressor()):\n",
    "    log_y = np.log(y)\n",
    "    score = cross_val_score(\n",
    "        model, X, log_y, cv=5, scoring=\"neg_mean_squared_error\",\n",
    "    )\n",
    "    score = -1 * score.mean()\n",
    "    score = np.sqrt(score)\n",
    "    return score"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d1657d52",
   "metadata": {
    "papermill": {
     "duration": 0.02441,
     "end_time": "2024-10-22T11:53:26.781351",
     "exception": false,
     "start_time": "2024-10-22T11:53:26.756941",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Data Cleaning"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4212bd5f",
   "metadata": {
    "papermill": {
     "duration": 0.023692,
     "end_time": "2024-10-22T11:53:26.829530",
     "exception": false,
     "start_time": "2024-10-22T11:53:26.805838",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Handling missing values"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aa0d27ca",
   "metadata": {
    "papermill": {
     "duration": 0.023538,
     "end_time": "2024-10-22T11:53:26.876945",
     "exception": false,
     "start_time": "2024-10-22T11:53:26.853407",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "This section will focus on deciding between whether the data is NaN because simply it doesn't exist (NE) or wasn't recorded (NR)."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f9239845",
   "metadata": {
    "papermill": {
     "duration": 0.024287,
     "end_time": "2024-10-22T11:53:26.925921",
     "exception": false,
     "start_time": "2024-10-22T11:53:26.901634",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Numerical"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "e554e811",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:53:26.976381Z",
     "iopub.status.busy": "2024-10-22T11:53:26.975932Z",
     "iopub.status.idle": "2024-10-22T11:53:26.987452Z",
     "shell.execute_reply": "2024-10-22T11:53:26.986118Z"
    },
    "papermill": {
     "duration": 0.039523,
     "end_time": "2024-10-22T11:53:26.989874",
     "exception": false,
     "start_time": "2024-10-22T11:53:26.950351",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LotFrontage    259\n",
       "MasVnrArea       8\n",
       "GarageYrBlt     81\n",
       "dtype: int64"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "numerical_null = raw_data.select_dtypes(['int64', 'float64']).isnull().sum()\n",
    "numerical_null[numerical_null > 0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "ad8cecc3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:53:27.040889Z",
     "iopub.status.busy": "2024-10-22T11:53:27.040477Z",
     "iopub.status.idle": "2024-10-22T11:53:27.055686Z",
     "shell.execute_reply": "2024-10-22T11:53:27.054469Z"
    },
    "papermill": {
     "duration": 0.043906,
     "end_time": "2024-10-22T11:53:27.058114",
     "exception": false,
     "start_time": "2024-10-22T11:53:27.014208",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>MasVnrType</th>\n",
       "      <th>MasVnrArea</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>234</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>529</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>650</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>936</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>973</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>977</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1243</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1278</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     MasVnrType  MasVnrArea\n",
       "234         NaN         NaN\n",
       "529         NaN         NaN\n",
       "650         NaN         NaN\n",
       "936         NaN         NaN\n",
       "973         NaN         NaN\n",
       "977         NaN         NaN\n",
       "1243        NaN         NaN\n",
       "1278        NaN         NaN"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "raw_data[['MasVnrType', 'MasVnrArea']][raw_data.MasVnrArea.isnull()]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "604ed05b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:53:27.109900Z",
     "iopub.status.busy": "2024-10-22T11:53:27.109434Z",
     "iopub.status.idle": "2024-10-22T11:53:27.116976Z",
     "shell.execute_reply": "2024-10-22T11:53:27.115854Z"
    },
    "papermill": {
     "duration": 0.036476,
     "end_time": "2024-10-22T11:53:27.119330",
     "exception": false,
     "start_time": "2024-10-22T11:53:27.082854",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "raw_data.MasVnrArea[raw_data.MasVnrArea.isnull()] = 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "4c8fed5f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:53:27.170252Z",
     "iopub.status.busy": "2024-10-22T11:53:27.169778Z",
     "iopub.status.idle": "2024-10-22T11:53:27.177019Z",
     "shell.execute_reply": "2024-10-22T11:53:27.175420Z"
    },
    "papermill": {
     "duration": 0.035875,
     "end_time": "2024-10-22T11:53:27.179758",
     "exception": false,
     "start_time": "2024-10-22T11:53:27.143883",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "raw_data['GarageYrBlt'].fillna(0, inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7cedef21",
   "metadata": {
    "papermill": {
     "duration": 0.024183,
     "end_time": "2024-10-22T11:53:27.229792",
     "exception": false,
     "start_time": "2024-10-22T11:53:27.205609",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "* LotFrontage: NR\n",
    "* MasVnrArea: NE (because its MasVnrType are all NaN). proceed to replace it with 0\n",
    "* GarageYrBlt: NE (all garage-related var has 81 misval--not exists)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d7acd6c1",
   "metadata": {
    "papermill": {
     "duration": 0.024085,
     "end_time": "2024-10-22T11:53:27.278338",
     "exception": false,
     "start_time": "2024-10-22T11:53:27.254253",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Categorical"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "f0a5a29f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:53:27.329983Z",
     "iopub.status.busy": "2024-10-22T11:53:27.329534Z",
     "iopub.status.idle": "2024-10-22T11:53:27.347564Z",
     "shell.execute_reply": "2024-10-22T11:53:27.346304Z"
    },
    "papermill": {
     "duration": 0.046288,
     "end_time": "2024-10-22T11:53:27.350020",
     "exception": false,
     "start_time": "2024-10-22T11:53:27.303732",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Alley           1369\n",
       "MasVnrType       872\n",
       "BsmtQual          37\n",
       "BsmtCond          37\n",
       "BsmtExposure      38\n",
       "BsmtFinType1      37\n",
       "BsmtFinType2      38\n",
       "Electrical         1\n",
       "FireplaceQu      690\n",
       "GarageType        81\n",
       "GarageFinish      81\n",
       "GarageQual        81\n",
       "GarageCond        81\n",
       "PoolQC          1453\n",
       "Fence           1179\n",
       "MiscFeature     1406\n",
       "dtype: int64"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "categorical_null = raw_data.select_dtypes(['object']).isnull().sum()\n",
    "categorical_null[categorical_null > 0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "9d5206ce",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:53:27.401229Z",
     "iopub.status.busy": "2024-10-22T11:53:27.400752Z",
     "iopub.status.idle": "2024-10-22T11:53:27.410203Z",
     "shell.execute_reply": "2024-10-22T11:53:27.409008Z"
    },
    "papermill": {
     "duration": 0.038093,
     "end_time": "2024-10-22T11:53:27.412852",
     "exception": false,
     "start_time": "2024-10-22T11:53:27.374759",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "867"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "raw_data.MasVnrType[raw_data.MasVnrArea == 0].isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "cf70db8b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:53:27.466425Z",
     "iopub.status.busy": "2024-10-22T11:53:27.465946Z",
     "iopub.status.idle": "2024-10-22T11:53:27.475770Z",
     "shell.execute_reply": "2024-10-22T11:53:27.474385Z"
    },
    "papermill": {
     "duration": 0.039111,
     "end_time": "2024-10-22T11:53:27.478576",
     "exception": false,
     "start_time": "2024-10-22T11:53:27.439465",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "raw_data.MasVnrType[raw_data.MasVnrArea > 0].isnull().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "493a8bb5",
   "metadata": {
    "papermill": {
     "duration": 0.026931,
     "end_time": "2024-10-22T11:53:27.532733",
     "exception": false,
     "start_time": "2024-10-22T11:53:27.505802",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "***MasVnrType: 867 NE; 5 NR***"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "97b53879",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:53:27.585124Z",
     "iopub.status.busy": "2024-10-22T11:53:27.584634Z",
     "iopub.status.idle": "2024-10-22T11:53:27.600673Z",
     "shell.execute_reply": "2024-10-22T11:53:27.599529Z"
    },
    "papermill": {
     "duration": 0.046109,
     "end_time": "2024-10-22T11:53:27.604137",
     "exception": false,
     "start_time": "2024-10-22T11:53:27.558028",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>BsmtCond</th>\n",
       "      <th>BsmtExposure</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>948</th>\n",
       "      <td>TA</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    BsmtCond BsmtExposure\n",
       "948       TA          NaN"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "raw_data.loc[:, ['BsmtCond', 'BsmtExposure']][(raw_data.BsmtExposure.isnull()) & (raw_data.BsmtCond.notnull())]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "e4428980",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:53:27.659136Z",
     "iopub.status.busy": "2024-10-22T11:53:27.658692Z",
     "iopub.status.idle": "2024-10-22T11:53:27.667729Z",
     "shell.execute_reply": "2024-10-22T11:53:27.666631Z"
    },
    "papermill": {
     "duration": 0.038992,
     "end_time": "2024-10-22T11:53:27.670032",
     "exception": false,
     "start_time": "2024-10-22T11:53:27.631040",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'No'"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "raw_data.loc[948, 'BsmtExposure'] = raw_data.BsmtExposure.mode()[0]\n",
    "raw_data.loc[948, 'BsmtExposure']"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d25b89f1",
   "metadata": {
    "papermill": {
     "duration": 0.032762,
     "end_time": "2024-10-22T11:53:27.732689",
     "exception": false,
     "start_time": "2024-10-22T11:53:27.699927",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "***BsmtExposure: 37 NE; 1 NR***\n",
    "\n",
    "All data that has a basement always has its BsmntExposure, but only this data point has a basement but not BsmtExposure. It will, then, be replaced with BsmtExposure mode-'No': No Exposure."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "dd8f02d9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:53:27.789531Z",
     "iopub.status.busy": "2024-10-22T11:53:27.789078Z",
     "iopub.status.idle": "2024-10-22T11:53:27.802693Z",
     "shell.execute_reply": "2024-10-22T11:53:27.801351Z"
    },
    "papermill": {
     "duration": 0.043671,
     "end_time": "2024-10-22T11:53:27.805849",
     "exception": false,
     "start_time": "2024-10-22T11:53:27.762178",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>BsmtFinSF2</th>\n",
       "      <th>BsmtFinType2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>332</th>\n",
       "      <td>479</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     BsmtFinSF2 BsmtFinType2\n",
       "332         479          NaN"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "raw_data.loc[:, ['BsmtFinSF2', 'BsmtFinType2']][(raw_data.BsmtFinSF2 > 0) & (raw_data.BsmtFinType2.isnull())]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "c21ee7f7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:53:27.869931Z",
     "iopub.status.busy": "2024-10-22T11:53:27.869374Z",
     "iopub.status.idle": "2024-10-22T11:53:27.883485Z",
     "shell.execute_reply": "2024-10-22T11:53:27.882172Z"
    },
    "papermill": {
     "duration": 0.048746,
     "end_time": "2024-10-22T11:53:27.886035",
     "exception": false,
     "start_time": "2024-10-22T11:53:27.837289",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Rec'"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "raw_data.loc[332, 'BsmtFinType2'] = raw_data.BsmtFinType2[raw_data.BsmtFinSF2 > 0].mode()[0]\n",
    "raw_data.loc[332, 'BsmtFinType2']"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e7fa0897",
   "metadata": {
    "papermill": {
     "duration": 0.031204,
     "end_time": "2024-10-22T11:53:27.954769",
     "exception": false,
     "start_time": "2024-10-22T11:53:27.923565",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "***BsmtFinType2: 37 NE; 1 NR***\n",
    "\n",
    "For BsmtFinType2, the mode is indeed 'Unf', but isn't reasonable to impute it with 'Unf' when its BsmtFinSF2 is > 0. ('Unf' is for BsmtFinSF2 == 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "8c6e8449",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:53:28.017921Z",
     "iopub.status.busy": "2024-10-22T11:53:28.017493Z",
     "iopub.status.idle": "2024-10-22T11:53:28.027032Z",
     "shell.execute_reply": "2024-10-22T11:53:28.025901Z"
    },
    "papermill": {
     "duration": 0.041377,
     "end_time": "2024-10-22T11:53:28.029844",
     "exception": false,
     "start_time": "2024-10-22T11:53:27.988467",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "690"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "raw_data.FireplaceQu[raw_data.Fireplaces == 0].isnull().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "78671757",
   "metadata": {
    "papermill": {
     "duration": 0.025398,
     "end_time": "2024-10-22T11:53:28.085852",
     "exception": false,
     "start_time": "2024-10-22T11:53:28.060454",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "***FireplaceQu: 690 NE***"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "683061a8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:53:28.139275Z",
     "iopub.status.busy": "2024-10-22T11:53:28.138795Z",
     "iopub.status.idle": "2024-10-22T11:53:28.147850Z",
     "shell.execute_reply": "2024-10-22T11:53:28.146848Z"
    },
    "papermill": {
     "duration": 0.038712,
     "end_time": "2024-10-22T11:53:28.150197",
     "exception": false,
     "start_time": "2024-10-22T11:53:28.111485",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "197     512\n",
       "810     648\n",
       "1170    576\n",
       "1182    555\n",
       "1298    480\n",
       "1386    519\n",
       "1423    738\n",
       "Name: PoolArea, dtype: int64"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "raw_data.PoolArea[raw_data.PoolArea > 0]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "26190ad7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T09:25:37.994900Z",
     "iopub.status.busy": "2024-10-22T09:25:37.994391Z",
     "iopub.status.idle": "2024-10-22T09:25:38.005199Z",
     "shell.execute_reply": "2024-10-22T09:25:38.002748Z",
     "shell.execute_reply.started": "2024-10-22T09:25:37.994852Z"
    },
    "papermill": {
     "duration": 0.025782,
     "end_time": "2024-10-22T11:53:28.202437",
     "exception": false,
     "start_time": "2024-10-22T11:53:28.176655",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "***PoolQC: 1453 NE***\n",
    "\n",
    "There's only 7 non-null values in the variable PoolQC because only 7 rows have PoolArea > 0, meaning that simply only 7 houses in the data have a pool. Therefore, the 0s in PoolArea will be left as-is, while the NaN in PoolQC will be converted to the lowest ordinal category-0."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "3ce1f239",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:53:28.257571Z",
     "iopub.status.busy": "2024-10-22T11:53:28.257112Z",
     "iopub.status.idle": "2024-10-22T11:53:28.266278Z",
     "shell.execute_reply": "2024-10-22T11:53:28.265262Z"
    },
    "papermill": {
     "duration": 0.039259,
     "end_time": "2024-10-22T11:53:28.268695",
     "exception": false,
     "start_time": "2024-10-22T11:53:28.229436",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "raw_data.MiscFeature[raw_data.MiscVal > 0].isnull().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7a183534",
   "metadata": {
    "papermill": {
     "duration": 0.026053,
     "end_time": "2024-10-22T11:53:28.321311",
     "exception": false,
     "start_time": "2024-10-22T11:53:28.295258",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "***MiscFeature: 1406 NE***"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6e0cdf4c",
   "metadata": {
    "papermill": {
     "duration": 0.0259,
     "end_time": "2024-10-22T11:53:28.373486",
     "exception": false,
     "start_time": "2024-10-22T11:53:28.347586",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "* Alley: *potentially* NE (the variable has 'None' category)\n",
    "* MasVnrType: 867 NE; 5 NR\n",
    "* BsmtQual: NE\n",
    "* BsmtCond: NE\n",
    "* BsmtExposure: 37 NE; 1 NR\n",
    "* BsmtFinType1: NE\n",
    "* BsmtFinType2: 37 NE; 1 NR\n",
    "* Electrical: NR\n",
    "* FireplaceQu: NE (Fireplaces also has 690 0s)\n",
    "* GarageType: NE\n",
    "* GarageFinish: NE\n",
    "* GarageQual: NE\n",
    "* GarageCond: NE\n",
    "* PoolQC: NE\n",
    "* Fence: *potentially* NE (the variable has 'None' category)\n",
    "* MiscFeature:  NE (MiscVal has no > 0 with NaN MiscFeature)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "aebda0de",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:53:28.428805Z",
     "iopub.status.busy": "2024-10-22T11:53:28.428359Z",
     "iopub.status.idle": "2024-10-22T11:53:28.435365Z",
     "shell.execute_reply": "2024-10-22T11:53:28.434273Z"
    },
    "papermill": {
     "duration": 0.037473,
     "end_time": "2024-10-22T11:53:28.438032",
     "exception": false,
     "start_time": "2024-10-22T11:53:28.400559",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "experimential_data = raw_data.copy()\n",
    "train_data = raw_data.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "48791664",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:53:28.493394Z",
     "iopub.status.busy": "2024-10-22T11:53:28.492910Z",
     "iopub.status.idle": "2024-10-22T11:53:28.564483Z",
     "shell.execute_reply": "2024-10-22T11:53:28.563295Z"
    },
    "papermill": {
     "duration": 0.102493,
     "end_time": "2024-10-22T11:53:28.567404",
     "exception": false,
     "start_time": "2024-10-22T11:53:28.464911",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X = experimential_data.drop('SalePrice', axis=1)\n",
    "y = experimential_data.SalePrice\n",
    "X_encoded, y_encoded = encode(X, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "d941ea5e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:53:28.621929Z",
     "iopub.status.busy": "2024-10-22T11:53:28.621514Z",
     "iopub.status.idle": "2024-10-22T11:53:28.642069Z",
     "shell.execute_reply": "2024-10-22T11:53:28.640816Z"
    },
    "papermill": {
     "duration": 0.051003,
     "end_time": "2024-10-22T11:53:28.644903",
     "exception": false,
     "start_time": "2024-10-22T11:53:28.593900",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X_imputed = impute(X_encoded)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "bf7afd43",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:53:28.700526Z",
     "iopub.status.busy": "2024-10-22T11:53:28.700066Z",
     "iopub.status.idle": "2024-10-22T11:53:28.712023Z",
     "shell.execute_reply": "2024-10-22T11:53:28.710959Z"
    },
    "papermill": {
     "duration": 0.04252,
     "end_time": "2024-10-22T11:53:28.714649",
     "exception": false,
     "start_time": "2024-10-22T11:53:28.672129",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "data = X_imputed.join(y_encoded)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "33e9a316",
   "metadata": {
    "papermill": {
     "duration": 0.02594,
     "end_time": "2024-10-22T11:53:28.768770",
     "exception": false,
     "start_time": "2024-10-22T11:53:28.742830",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Data Visualization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "acf8684c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T09:35:01.086682Z",
     "iopub.status.busy": "2024-10-22T09:35:01.086181Z",
     "iopub.status.idle": "2024-10-22T09:35:01.095772Z",
     "shell.execute_reply": "2024-10-22T09:35:01.093698Z",
     "shell.execute_reply.started": "2024-10-22T09:35:01.086633Z"
    },
    "papermill": {
     "duration": 0.025892,
     "end_time": "2024-10-22T11:53:28.820972",
     "exception": false,
     "start_time": "2024-10-22T11:53:28.795080",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "uncomment to show"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7be727a5",
   "metadata": {
    "papermill": {
     "duration": 0.025775,
     "end_time": "2024-10-22T11:53:28.872893",
     "exception": false,
     "start_time": "2024-10-22T11:53:28.847118",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Target"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "f62dcb11",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:53:28.928015Z",
     "iopub.status.busy": "2024-10-22T11:53:28.927577Z",
     "iopub.status.idle": "2024-10-22T11:53:28.932598Z",
     "shell.execute_reply": "2024-10-22T11:53:28.931400Z"
    },
    "jupyter": {
     "source_hidden": true
    },
    "papermill": {
     "duration": 0.035593,
     "end_time": "2024-10-22T11:53:28.934967",
     "exception": false,
     "start_time": "2024-10-22T11:53:28.899374",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# sns.distplot(data.SalePrice)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bc0ab440",
   "metadata": {
    "papermill": {
     "duration": 0.026293,
     "end_time": "2024-10-22T11:53:28.987774",
     "exception": false,
     "start_time": "2024-10-22T11:53:28.961481",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Features"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ec148cde",
   "metadata": {
    "papermill": {
     "duration": 0.026168,
     "end_time": "2024-10-22T11:53:29.041851",
     "exception": false,
     "start_time": "2024-10-22T11:53:29.015683",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Categorical"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "4138bee4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:53:29.096869Z",
     "iopub.status.busy": "2024-10-22T11:53:29.096390Z",
     "iopub.status.idle": "2024-10-22T11:53:29.101510Z",
     "shell.execute_reply": "2024-10-22T11:53:29.100300Z"
    },
    "jupyter": {
     "source_hidden": true
    },
    "papermill": {
     "duration": 0.035178,
     "end_time": "2024-10-22T11:53:29.104004",
     "exception": false,
     "start_time": "2024-10-22T11:53:29.068826",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# categoricals = data.select_dtypes(['int8'])\n",
    "# categoricals"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "abb81b1c",
   "metadata": {
    "papermill": {
     "duration": 0.02647,
     "end_time": "2024-10-22T11:53:29.157411",
     "exception": false,
     "start_time": "2024-10-22T11:53:29.130941",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "***Nominal***"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "4eb7b8bc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:53:29.213561Z",
     "iopub.status.busy": "2024-10-22T11:53:29.213132Z",
     "iopub.status.idle": "2024-10-22T11:53:29.220177Z",
     "shell.execute_reply": "2024-10-22T11:53:29.218877Z"
    },
    "jupyter": {
     "source_hidden": true
    },
    "papermill": {
     "duration": 0.03915,
     "end_time": "2024-10-22T11:53:29.222925",
     "exception": false,
     "start_time": "2024-10-22T11:53:29.183775",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# sns.set(style=\"whitegrid\")\n",
    "\n",
    "# # Define number of rows and columns for the subplots grid\n",
    "# num_cols = 3  # Number of plots per row\n",
    "# num_rows = (len(features_nom) + num_cols - 1) // num_cols  # Calculate required rows\n",
    "\n",
    "# # Create the figure and axis objects for the grid\n",
    "# fig, axes = plt.subplots(num_rows, num_cols, figsize=(16, num_rows * 5))\n",
    "\n",
    "# # Flatten the axes array for easier indexing\n",
    "# axes = axes.flatten()\n",
    "\n",
    "# # Create a violin plot for each categorical variable\n",
    "# for i, nominal in enumerate(features_nom):\n",
    "#     sns.violinplot(x=data[nominal], y=data['SalePrice'], ax=axes[i])\n",
    "#     axes[i].set_title(nominal)\n",
    "\n",
    "# # Hide any unused subplots\n",
    "# for j in range(i + 1, len(axes)):\n",
    "#     fig.delaxes(axes[j])\n",
    "\n",
    "# plt.tight_layout()\n",
    "# plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "04ce767d",
   "metadata": {
    "papermill": {
     "duration": 0.025782,
     "end_time": "2024-10-22T11:53:29.275667",
     "exception": false,
     "start_time": "2024-10-22T11:53:29.249885",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "***Ordinal***"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "1bdf8641",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:53:29.330625Z",
     "iopub.status.busy": "2024-10-22T11:53:29.329464Z",
     "iopub.status.idle": "2024-10-22T11:53:29.335457Z",
     "shell.execute_reply": "2024-10-22T11:53:29.334415Z"
    },
    "jupyter": {
     "source_hidden": true
    },
    "papermill": {
     "duration": 0.036338,
     "end_time": "2024-10-22T11:53:29.338095",
     "exception": false,
     "start_time": "2024-10-22T11:53:29.301757",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# sns.set(style=\"whitegrid\")\n",
    "\n",
    "# # Define number of rows and columns for the subplots grid\n",
    "# num_cols = 3  # Number of plots per row\n",
    "# num_rows = (len(ordered_levels) + num_cols - 1) // num_cols  # Calculate required rows\n",
    "\n",
    "# # Create the figure and axis objects for the grid\n",
    "# fig, axes = plt.subplots(num_rows, num_cols, figsize=(16, num_rows * 5))\n",
    "\n",
    "# # Flatten the axes array for easier indexing\n",
    "# axes = axes.flatten()\n",
    "\n",
    "# # Create a violin plot for each categorical variable\n",
    "# for i, nominal in enumerate(ordered_levels):\n",
    "#     sns.violinplot(x=data[nominal], y=data['SalePrice'], ax=axes[i])\n",
    "#     axes[i].set_title(nominal)\n",
    "\n",
    "# # Hide any unused subplots\n",
    "# for j in range(i + 1, len(axes)):\n",
    "#     fig.delaxes(axes[j])\n",
    "\n",
    "# plt.tight_layout()\n",
    "# plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9fb70916",
   "metadata": {
    "papermill": {
     "duration": 0.025926,
     "end_time": "2024-10-22T11:53:29.390261",
     "exception": false,
     "start_time": "2024-10-22T11:53:29.364335",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Numerical"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0d6b9e07",
   "metadata": {
    "papermill": {
     "duration": 0.025844,
     "end_time": "2024-10-22T11:53:29.442767",
     "exception": false,
     "start_time": "2024-10-22T11:53:29.416923",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "***Histogram***"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "b1b72518",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:53:29.498041Z",
     "iopub.status.busy": "2024-10-22T11:53:29.497591Z",
     "iopub.status.idle": "2024-10-22T11:53:29.502588Z",
     "shell.execute_reply": "2024-10-22T11:53:29.501397Z"
    },
    "jupyter": {
     "source_hidden": true
    },
    "papermill": {
     "duration": 0.035478,
     "end_time": "2024-10-22T11:53:29.504963",
     "exception": false,
     "start_time": "2024-10-22T11:53:29.469485",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# data_numerical = data.select_dtypes(include=['float64', 'int64'])\n",
    "# data_numerical.hist(figsize=(20, 25), bins=50)\n",
    "# data_numerical.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d9bf5883",
   "metadata": {
    "papermill": {
     "duration": 0.025859,
     "end_time": "2024-10-22T11:53:29.557297",
     "exception": false,
     "start_time": "2024-10-22T11:53:29.531438",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "***Correlation Map***"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "47115027",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:53:29.612367Z",
     "iopub.status.busy": "2024-10-22T11:53:29.611892Z",
     "iopub.status.idle": "2024-10-22T11:53:29.617371Z",
     "shell.execute_reply": "2024-10-22T11:53:29.616158Z"
    },
    "jupyter": {
     "source_hidden": true
    },
    "papermill": {
     "duration": 0.036359,
     "end_time": "2024-10-22T11:53:29.619760",
     "exception": false,
     "start_time": "2024-10-22T11:53:29.583401",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# def corrplot(df, method=\"pearson\", annot=True, **kwargs):\n",
    "#     sns.clustermap(\n",
    "#         df.corr(method, numeric_only=True),\n",
    "#         vmin=-1.0,\n",
    "#         vmax=1.0,\n",
    "#         cmap=\"icefire\",\n",
    "#         method=\"complete\",\n",
    "#         annot=annot,\n",
    "#         **kwargs,\n",
    "#     )\n",
    "\n",
    "# corrplot(data_numerical, annot=None)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d585eb15",
   "metadata": {
    "papermill": {
     "duration": 0.025725,
     "end_time": "2024-10-22T11:53:29.671772",
     "exception": false,
     "start_time": "2024-10-22T11:53:29.646047",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Feature Engineering"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ca94029d",
   "metadata": {
    "papermill": {
     "duration": 0.081964,
     "end_time": "2024-10-22T11:53:29.779815",
     "exception": false,
     "start_time": "2024-10-22T11:53:29.697851",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Establishing a baseline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "67ea5e35",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:53:29.833663Z",
     "iopub.status.busy": "2024-10-22T11:53:29.833209Z",
     "iopub.status.idle": "2024-10-22T11:53:33.426178Z",
     "shell.execute_reply": "2024-10-22T11:53:33.424849Z"
    },
    "papermill": {
     "duration": 3.623131,
     "end_time": "2024-10-22T11:53:33.429003",
     "exception": false,
     "start_time": "2024-10-22T11:53:29.805872",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.12807252272421285"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X = data.drop('SalePrice', axis=1)\n",
    "y = data.SalePrice\n",
    "baseline = score_dataset(X, y)\n",
    "baseline"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "42112eb9",
   "metadata": {
    "papermill": {
     "duration": 0.028729,
     "end_time": "2024-10-22T11:53:33.485092",
     "exception": false,
     "start_time": "2024-10-22T11:53:33.456363",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Mutual Information"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "182490cd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:53:33.540268Z",
     "iopub.status.busy": "2024-10-22T11:53:33.539784Z",
     "iopub.status.idle": "2024-10-22T11:53:34.649829Z",
     "shell.execute_reply": "2024-10-22T11:53:34.648573Z"
    },
    "papermill": {
     "duration": 1.140729,
     "end_time": "2024-10-22T11:53:34.652733",
     "exception": false,
     "start_time": "2024-10-22T11:53:33.512004",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "OverallQual     0.561\n",
       "Neighborhood    0.528\n",
       "GrLivArea       0.482\n",
       "YearBuilt       0.409\n",
       "TotalBsmtSF     0.369\n",
       "                ...  \n",
       "LowQualFinSF    0.002\n",
       "BsmtFinSF2      0.002\n",
       "Street          0.001\n",
       "MiscVal         0.001\n",
       "LandSlope       0.001\n",
       "Name: MI Scores, Length: 74, dtype: float64"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def make_mi_scores(X, y):\n",
    "    \n",
    "    discrete_features = [pd.api.types.is_integer_dtype(t) for t in X.dtypes]\n",
    "    mi_scores = mutual_info_regression(X, y, discrete_features=discrete_features).round(3)\n",
    "    mi_scores = pd.Series(mi_scores, name=\"MI Scores\", index=X.columns)\n",
    "    mi_scores = mi_scores.sort_values(ascending=False)\n",
    "    return mi_scores\n",
    "\n",
    "def plot_mi_scores(scores):\n",
    "    scores = scores.sort_values(ascending=True)\n",
    "    width = np.arange(len(scores))\n",
    "    ticks = list(scores.index)\n",
    "    plt.barh(width, scores)\n",
    "    plt.yticks(width, ticks)\n",
    "    plt.title(\"Mutual Information Scores\")\n",
    "\n",
    "X = data.drop('SalePrice', axis=1)\n",
    "y = data.SalePrice\n",
    "\n",
    "mi_scores = make_mi_scores(X, y)\n",
    "mi_scores[mi_scores > 0.0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "f6c8e66e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:53:34.707894Z",
     "iopub.status.busy": "2024-10-22T11:53:34.707459Z",
     "iopub.status.idle": "2024-10-22T11:53:34.713838Z",
     "shell.execute_reply": "2024-10-22T11:53:34.712579Z"
    },
    "papermill": {
     "duration": 0.037209,
     "end_time": "2024-10-22T11:53:34.716656",
     "exception": false,
     "start_time": "2024-10-22T11:53:34.679447",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def drop_uninformative(X, mi_scores=mi_scores):\n",
    "    mi_scores = mi_scores.reindex(X.columns)\n",
    "    X = X.loc[:, mi_scores > 0.0]\n",
    "    return X"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "0efd22e8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:53:34.774041Z",
     "iopub.status.busy": "2024-10-22T11:53:34.773582Z",
     "iopub.status.idle": "2024-10-22T11:53:38.239893Z",
     "shell.execute_reply": "2024-10-22T11:53:38.238378Z"
    },
    "papermill": {
     "duration": 3.498806,
     "end_time": "2024-10-22T11:53:38.242459",
     "exception": false,
     "start_time": "2024-10-22T11:53:34.743653",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.12761547591530215"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_informative = data.copy()\n",
    "X = data_informative.drop('SalePrice', axis=1)\n",
    "y = data_informative.SalePrice\n",
    "X = drop_uninformative(X)\n",
    "data_informative = X.join(y)\n",
    "score_dataset(X, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "6e1a4da2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:53:38.299882Z",
     "iopub.status.busy": "2024-10-22T11:53:38.299422Z",
     "iopub.status.idle": "2024-10-22T11:53:38.304292Z",
     "shell.execute_reply": "2024-10-22T11:53:38.303155Z"
    },
    "jupyter": {
     "source_hidden": true
    },
    "papermill": {
     "duration": 0.036849,
     "end_time": "2024-10-22T11:53:38.306680",
     "exception": false,
     "start_time": "2024-10-22T11:53:38.269831",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# plot_mi_scores(mi_scores)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83645b78",
   "metadata": {
    "papermill": {
     "duration": 0.027207,
     "end_time": "2024-10-22T11:53:38.360817",
     "exception": false,
     "start_time": "2024-10-22T11:53:38.333610",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Principal Component Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "78c40635",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:53:38.417591Z",
     "iopub.status.busy": "2024-10-22T11:53:38.417067Z",
     "iopub.status.idle": "2024-10-22T11:53:38.434757Z",
     "shell.execute_reply": "2024-10-22T11:53:38.433608Z"
    },
    "papermill": {
     "duration": 0.049516,
     "end_time": "2024-10-22T11:53:38.437279",
     "exception": false,
     "start_time": "2024-10-22T11:53:38.387763",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.decomposition import PCA\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "\n",
    "\n",
    "def apply_pca(X, scaler=None, pca=None, test=False, standardize=True):\n",
    "    loadings_index = X.columns\n",
    "\n",
    "    if scaler is None:\n",
    "        scaler = StandardScaler()\n",
    "    \n",
    "    if standardize and not test:\n",
    "        X = scaler.fit_transform(X)\n",
    "    else:\n",
    "        X = scaler.transform(X)\n",
    "\n",
    "    if pca is None:\n",
    "        pca = PCA()\n",
    "        \n",
    "    if not test:\n",
    "        X_pca = pca.fit_transform(X)\n",
    "    else:\n",
    "        X_pca = pca.transform(X)\n",
    "        \n",
    "    # Convert to dataframe\n",
    "    component_names = [f\"PC{i+1}\" for i in range(X_pca.shape[1])]\n",
    "    X_pca = pd.DataFrame(X_pca, columns=component_names)\n",
    "    \n",
    "    # Create loadings\n",
    "    loadings = pd.DataFrame(\n",
    "        pca.components_.T,  # transpose the matrix of loadings\n",
    "        columns=component_names,  # so the columns are the principal components\n",
    "        index=loadings_index,  # and the rows are the original features\n",
    "    )\n",
    "\n",
    "    \n",
    "    return scaler, pca, X_pca, loadings\n",
    "\n",
    "\n",
    "def plot_variance(pca, width=8, dpi=100):\n",
    "    # Create figure\n",
    "    fig, axs = plt.subplots(1, 2)\n",
    "    n = pca.n_components_\n",
    "    grid = np.arange(1, n + 1)\n",
    "    \n",
    "    # Explained variance\n",
    "    evr = pca.explained_variance_ratio_\n",
    "    axs[0].bar(grid, evr)\n",
    "    axs[0].set(\n",
    "        xlabel=\"Component\", title=\"% Explained Variance\", ylim=(0.0, 1.0)\n",
    "    )\n",
    "    \n",
    "    # Cumulative Variance\n",
    "    cv = np.cumsum(evr)\n",
    "    axs[1].plot(np.r_[0, grid], np.r_[0, cv], \"o-\")\n",
    "    axs[1].set(\n",
    "        xlabel=\"Component\", title=\"% Cumulative Variance\", ylim=(0.0, 1.0)\n",
    "    )\n",
    "    \n",
    "    # Set up figure\n",
    "    fig.set(figwidth=8, dpi=100)\n",
    "    return axs\n",
    "\n",
    "def pca_components(X, features, scaler=None, pca=None, test=False):\n",
    "    X_pca_features = X.loc[:, features]\n",
    "    if not test:\n",
    "        scaler, pca, X_pca, pca_loadings = apply_pca(X_pca_features, test=False)\n",
    "    else:\n",
    "        scaler, pca, X_pca, pca_loadings = apply_pca(X_pca_features, scaler=scaler, pca=pca, test=True)\n",
    "    X_w_pca = X.drop(columns=features, errors='ignore')\n",
    "    X_w_pca = X_w_pca.join(X_pca)\n",
    "    \n",
    "    return scaler, pca, X_w_pca, pca_loadings\n",
    "\n",
    "pca_features =['GrLivArea', 'GarageCars', 'TotalBsmtSF', 'YearBuilt', 'LotArea']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "0bd2d5bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:53:38.495441Z",
     "iopub.status.busy": "2024-10-22T11:53:38.494438Z",
     "iopub.status.idle": "2024-10-22T11:53:42.339377Z",
     "shell.execute_reply": "2024-10-22T11:53:42.338301Z"
    },
    "papermill": {
     "duration": 3.876392,
     "end_time": "2024-10-22T11:53:42.341779",
     "exception": false,
     "start_time": "2024-10-22T11:53:38.465387",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.12479836470023484"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X = data_informative.drop('SalePrice', axis=1)\n",
    "y = data_informative.SalePrice\n",
    "\n",
    "scaler, pca, X_w_pca, loadings = pca_components(X, pca_features)\n",
    "data_w_pca = X_w_pca.join(y)\n",
    "score_dataset(X_w_pca, y)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dc0fde87",
   "metadata": {
    "papermill": {
     "duration": 0.027297,
     "end_time": "2024-10-22T11:53:42.396001",
     "exception": false,
     "start_time": "2024-10-22T11:53:42.368704",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Final create_features function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "1b7ff0ae",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:53:42.453109Z",
     "iopub.status.busy": "2024-10-22T11:53:42.452697Z",
     "iopub.status.idle": "2024-10-22T11:53:42.461062Z",
     "shell.execute_reply": "2024-10-22T11:53:42.459846Z"
    },
    "papermill": {
     "duration": 0.039575,
     "end_time": "2024-10-22T11:53:42.463555",
     "exception": false,
     "start_time": "2024-10-22T11:53:42.423980",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def create_features(X, y=None, scaler=None, pca=None, test=False):\n",
    "    X_encoded = encode(X, y)\n",
    "    X_imputed = impute(X_encoded)\n",
    "    X_informative = drop_uninformative(X_imputed)\n",
    "    if not test:\n",
    "        scaler, pca, X_w_pca, _ = pca_components(X_informative, pca_features, test)\n",
    "        return scaler, pca, X_w_pca\n",
    "    else:\n",
    "        _, _, X_w_pca, _ = pca_components(X_informative, pca_features, scaler=scaler, pca=pca, test=True)\n",
    "        return X_w_pca"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b256c469",
   "metadata": {
    "papermill": {
     "duration": 0.027111,
     "end_time": "2024-10-22T11:53:42.517976",
     "exception": false,
     "start_time": "2024-10-22T11:53:42.490865",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Model Building"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "2baad42c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:53:42.573891Z",
     "iopub.status.busy": "2024-10-22T11:53:42.572924Z",
     "iopub.status.idle": "2024-10-22T11:53:43.601302Z",
     "shell.execute_reply": "2024-10-22T11:53:43.600050Z"
    },
    "papermill": {
     "duration": 1.059373,
     "end_time": "2024-10-22T11:53:43.604060",
     "exception": false,
     "start_time": "2024-10-22T11:53:42.544687",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GradientBoostingRegressor()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GradientBoostingRegressor</label><div class=\"sk-toggleable__content\"><pre>GradientBoostingRegressor()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "GradientBoostingRegressor()"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "scaler, pca, X_train = create_features(train_data.drop('SalePrice', axis=1), test=False)\n",
    "y_train = train_data.SalePrice\n",
    "\n",
    "model = GradientBoostingRegressor()\n",
    "model.fit(X_train, np.log(y_train))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "40f1b0f8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:53:43.662020Z",
     "iopub.status.busy": "2024-10-22T11:53:43.661608Z",
     "iopub.status.idle": "2024-10-22T11:53:43.673974Z",
     "shell.execute_reply": "2024-10-22T11:53:43.672946Z"
    },
    "papermill": {
     "duration": 0.043987,
     "end_time": "2024-10-22T11:53:43.676446",
     "exception": false,
     "start_time": "2024-10-22T11:53:43.632459",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "log_SalePrice_train_pred = model.predict(X_train)\n",
    "\n",
    "log_SalePrice_train = np.log(y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "2f2ee975",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:53:43.733280Z",
     "iopub.status.busy": "2024-10-22T11:53:43.732312Z",
     "iopub.status.idle": "2024-10-22T11:53:44.076205Z",
     "shell.execute_reply": "2024-10-22T11:53:44.075072Z"
    },
    "papermill": {
     "duration": 0.375193,
     "end_time": "2024-10-22T11:53:44.079057",
     "exception": false,
     "start_time": "2024-10-22T11:53:43.703864",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 400x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(4, 4))\n",
    "plt.scatter(log_SalePrice_train, log_SalePrice_train_pred, alpha=0.5)\n",
    "plt.plot([min(log_SalePrice_train), max(log_SalePrice_train)], [min(log_SalePrice_train), max(log_SalePrice_train)], color='red', linestyle='--')\n",
    "plt.title('Predicted vs Actual log_SalePrice')\n",
    "plt.xlabel('Actual log_SalePrice')\n",
    "plt.ylabel('Predicted log_SalePrice')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "a68cf7b2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:53:44.137355Z",
     "iopub.status.busy": "2024-10-22T11:53:44.136854Z",
     "iopub.status.idle": "2024-10-22T11:53:44.145918Z",
     "shell.execute_reply": "2024-10-22T11:53:44.144779Z"
    },
    "papermill": {
     "duration": 0.040668,
     "end_time": "2024-10-22T11:53:44.148122",
     "exception": false,
     "start_time": "2024-10-22T11:53:44.107454",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9584571164908497"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "r2_score(log_SalePrice_train, log_SalePrice_train_pred)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e505951b",
   "metadata": {
    "papermill": {
     "duration": 0.027735,
     "end_time": "2024-10-22T11:53:44.204081",
     "exception": false,
     "start_time": "2024-10-22T11:53:44.176346",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Hyperparameter tuning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "59070fea",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:53:44.261857Z",
     "iopub.status.busy": "2024-10-22T11:53:44.261456Z",
     "iopub.status.idle": "2024-10-22T11:53:44.266943Z",
     "shell.execute_reply": "2024-10-22T11:53:44.265731Z"
    },
    "papermill": {
     "duration": 0.037357,
     "end_time": "2024-10-22T11:53:44.269291",
     "exception": false,
     "start_time": "2024-10-22T11:53:44.231934",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# search_space = {\n",
    "#     \"n_estimators\": [100, 500, 1000],           # number of trees\n",
    "#     \"learning_rate\": [0.01, 0.1],               # effect of each tree\n",
    "#     \"max_depth\": [3, 5, 7],                     # limit depth to common best performers\n",
    "#     \"min_samples_split\": [5, 10],               # smaller range of values\n",
    "#     \"min_samples_leaf\": [1, 2],                 # smaller range of values\n",
    "#     \"subsample\": [0.8, 1.0],                    # reduce to fewer options\n",
    "#     \"max_features\": ['sqrt']                    # only try one common option\n",
    "# }\n",
    "\n",
    "# GS = GridSearchCV(estimator=model, param_grid=search_space, scoring=['r2', 'neg_root_mean_squared_error'], refit='neg_root_mean_squared_error', cv=5, verbose=4)\n",
    "# GS.fit(X_train, np.log(y_train))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "a483fa37",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:53:44.327976Z",
     "iopub.status.busy": "2024-10-22T11:53:44.327569Z",
     "iopub.status.idle": "2024-10-22T11:53:46.523375Z",
     "shell.execute_reply": "2024-10-22T11:53:46.522025Z"
    },
    "papermill": {
     "duration": 2.228536,
     "end_time": "2024-10-22T11:53:46.526091",
     "exception": false,
     "start_time": "2024-10-22T11:53:44.297555",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GradientBoostingRegressor(learning_rate=0.01, max_depth=5, max_features=&#x27;sqrt&#x27;,\n",
       "                          min_samples_leaf=2, min_samples_split=10,\n",
       "                          n_estimators=1000, subsample=0.8)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GradientBoostingRegressor</label><div class=\"sk-toggleable__content\"><pre>GradientBoostingRegressor(learning_rate=0.01, max_depth=5, max_features=&#x27;sqrt&#x27;,\n",
       "                          min_samples_leaf=2, min_samples_split=10,\n",
       "                          n_estimators=1000, subsample=0.8)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "GradientBoostingRegressor(learning_rate=0.01, max_depth=5, max_features='sqrt',\n",
       "                          min_samples_leaf=2, min_samples_split=10,\n",
       "                          n_estimators=1000, subsample=0.8)"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Best parameters:\n",
    "model = GradientBoostingRegressor(learning_rate=0.01, max_depth=5, max_features='sqrt', min_samples_leaf=2, min_samples_split=10, n_estimators=1000, subsample=0.8)\n",
    "\n",
    "model.fit(X_train, np.log(y_train))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "df2e00f9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:53:46.585067Z",
     "iopub.status.busy": "2024-10-22T11:53:46.584616Z",
     "iopub.status.idle": "2024-10-22T11:53:46.641559Z",
     "shell.execute_reply": "2024-10-22T11:53:46.640489Z"
    },
    "papermill": {
     "duration": 0.089358,
     "end_time": "2024-10-22T11:53:46.644256",
     "exception": false,
     "start_time": "2024-10-22T11:53:46.554898",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "log_SalePrice_train_pred = model.predict(X_train)\n",
    "log_SalePrice_train = np.log(y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "6ea31987",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:53:46.702968Z",
     "iopub.status.busy": "2024-10-22T11:53:46.702524Z",
     "iopub.status.idle": "2024-10-22T11:53:47.004750Z",
     "shell.execute_reply": "2024-10-22T11:53:47.003691Z"
    },
    "papermill": {
     "duration": 0.335028,
     "end_time": "2024-10-22T11:53:47.007705",
     "exception": false,
     "start_time": "2024-10-22T11:53:46.672677",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 400x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(4, 4))\n",
    "plt.scatter(log_SalePrice_train, log_SalePrice_train_pred, alpha=0.5)\n",
    "plt.plot([min(log_SalePrice_train), max(log_SalePrice_train)], [min(log_SalePrice_train), max(log_SalePrice_train)], color='red', linestyle='--')\n",
    "plt.title('Predicted vs Actual log_SalePrice')\n",
    "plt.xlabel('Actual log_SalePrice')\n",
    "plt.ylabel('Predicted log_SalePrice')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "e87c9bf8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:53:47.069174Z",
     "iopub.status.busy": "2024-10-22T11:53:47.068765Z",
     "iopub.status.idle": "2024-10-22T11:53:47.077826Z",
     "shell.execute_reply": "2024-10-22T11:53:47.076650Z"
    },
    "papermill": {
     "duration": 0.042984,
     "end_time": "2024-10-22T11:53:47.080165",
     "exception": false,
     "start_time": "2024-10-22T11:53:47.037181",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9791254528138138"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "r2_score(log_SalePrice_train, log_SalePrice_train_pred)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f97181f0",
   "metadata": {
    "papermill": {
     "duration": 0.029226,
     "end_time": "2024-10-22T11:53:47.139426",
     "exception": false,
     "start_time": "2024-10-22T11:53:47.110200",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Sumbission"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "4aaafb65",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:53:47.201314Z",
     "iopub.status.busy": "2024-10-22T11:53:47.200857Z",
     "iopub.status.idle": "2024-10-22T11:53:47.391185Z",
     "shell.execute_reply": "2024-10-22T11:53:47.389953Z"
    },
    "papermill": {
     "duration": 0.22491,
     "end_time": "2024-10-22T11:53:47.393951",
     "exception": false,
     "start_time": "2024-10-22T11:53:47.169041",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>SalePrice</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1461</td>\n",
       "      <td>120945.371795</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1462</td>\n",
       "      <td>150867.219238</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1463</td>\n",
       "      <td>177908.064571</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1464</td>\n",
       "      <td>188586.565094</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1465</td>\n",
       "      <td>189178.293685</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Id      SalePrice\n",
       "0  1461  120945.371795\n",
       "1  1462  150867.219238\n",
       "2  1463  177908.064571\n",
       "3  1464  188586.565094\n",
       "4  1465  189178.293685"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_file_path = \"../input/house-prices-advanced-regression-techniques/test.csv\"\n",
    "test_data = pd.read_csv(test_file_path)\n",
    "ids = test_data.Id\n",
    "\n",
    "test_data = create_features(test_data, scaler=scaler, pca=pca, test=True)\n",
    "\n",
    "for colname in test_data.select_dtypes([\"category\"]):\n",
    "        test_data[colname] = test_data[colname].cat.codes\n",
    "\n",
    "preds = np.exp(model.predict(test_data))\n",
    "output = pd.DataFrame({'Id': ids,\n",
    "                       'SalePrice': preds.squeeze()})\n",
    "\n",
    "output.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "ddf7c4e4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-22T11:53:47.455163Z",
     "iopub.status.busy": "2024-10-22T11:53:47.454747Z",
     "iopub.status.idle": "2024-10-22T11:53:47.527314Z",
     "shell.execute_reply": "2024-10-22T11:53:47.526114Z"
    },
    "papermill": {
     "duration": 0.106058,
     "end_time": "2024-10-22T11:53:47.529891",
     "exception": false,
     "start_time": "2024-10-22T11:53:47.423833",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>SalePrice</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1461</td>\n",
       "      <td>120945.371795</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1462</td>\n",
       "      <td>150867.219238</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1463</td>\n",
       "      <td>177908.064571</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1464</td>\n",
       "      <td>188586.565094</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1465</td>\n",
       "      <td>189178.293685</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Id      SalePrice\n",
       "0  1461  120945.371795\n",
       "1  1462  150867.219238\n",
       "2  1463  177908.064571\n",
       "3  1464  188586.565094\n",
       "4  1465  189178.293685"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sample_submission_df = pd.read_csv('../input/house-prices-advanced-regression-techniques/sample_submission.csv')\n",
    "sample_submission_df['SalePrice'] = np.exp(model.predict(test_data))\n",
    "sample_submission_df.to_csv('/kaggle/working/submission.csv', index=False)\n",
    "sample_submission_df.head()"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 868283,
     "sourceId": 5407,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 30786,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 28.78016,
   "end_time": "2024-10-22T11:53:48.281588",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-10-22T11:53:19.501428",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
